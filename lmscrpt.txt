USE [master]
GO
/****** Object:  Database [LibMan]    Script Date: 16/Dec/23 12:38:36 PM ******/
CREATE DATABASE [LibMan]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'LibMan', FILENAME = N'D:\SQL_Server\DATA\LibMan.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'LibMan_log', FILENAME = N'D:\SQL_Server\DATA\LibMan_log.ldf' , SIZE = 139264KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [LibMan] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [LibMan].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [LibMan] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [LibMan] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [LibMan] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [LibMan] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [LibMan] SET ARITHABORT OFF 
GO
ALTER DATABASE [LibMan] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [LibMan] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [LibMan] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [LibMan] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [LibMan] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [LibMan] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [LibMan] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [LibMan] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [LibMan] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [LibMan] SET  ENABLE_BROKER 
GO
ALTER DATABASE [LibMan] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [LibMan] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [LibMan] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [LibMan] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [LibMan] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [LibMan] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [LibMan] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [LibMan] SET RECOVERY FULL 
GO
ALTER DATABASE [LibMan] SET  MULTI_USER 
GO
ALTER DATABASE [LibMan] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [LibMan] SET DB_CHAINING OFF 
GO
ALTER DATABASE [LibMan] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [LibMan] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [LibMan] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [LibMan] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'LibMan', N'ON'
GO
ALTER DATABASE [LibMan] SET QUERY_STORE = OFF
GO
USE [LibMan]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplit]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
CREATE FUNCTION [dbo].[fnSplit](
    @sInputList VARCHAR(8000) -- List of delimited items
  , @sDelimiter VARCHAR(8000) -- seaprate items by ex :- , ' ' - |  
) RETURNS @List TABLE (item VARCHAR(8000))
 
BEGIN
DECLARE @sItem VARCHAR(8000)
WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
 BEGIN
 SELECT
  @sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
  @sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
 IF LEN(@sItem) > 0
  INSERT INTO @List SELECT @sItem
 END
 
IF LEN(@sInputList) > 0
 INSERT INTO @List SELECT @sInputList -- Put the last item in
RETURN
END
 
 
 
 
GO
/****** Object:  UserDefinedFunction [dbo].[Fun_C_NumberSystem_SetLength]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
create function [dbo].[Fun_C_NumberSystem_SetLength](@AutoNo numeric(12,0),@NoLen numeric(2,0))
returns nvarchar(10)
AS
BEGIN
declare @Length nvarchar(20)
if @NoLen>=len(@AutoNo)
begin
select @Length =
replicate('0',(@NoLen - (len(@AutoNo)))) 
end
else begin
select @Length= ''
end
return @Length
END
 
 
 
 
 
GO
/****** Object:  Table [dbo].[l_publisher]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_publisher](
	[publisher_kid] [int] IDENTITY(1,1) NOT NULL,
	[publisher_name] [nvarchar](100) NOT NULL,
	[publisher_status] [bit] NULL,
	[publisher_idate] [datetime] NULL,
	[publisher_iuser] [int] NULL,
	[publisher_udate] [datetime] NULL,
	[publiser_uuser] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[publisher_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_author]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_author](
	[author_kid] [int] IDENTITY(1,1) NOT NULL,
	[author_name] [nvarchar](100) NOT NULL,
	[author_status] [bit] NULL,
	[author_idate] [datetime] NULL,
	[author_iuser] [int] NULL,
	[author_udate] [datetime] NULL,
	[author_uuser] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[author_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_book]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_book](
	[book_kid] [int] IDENTITY(1,1) NOT NULL,
	[book_title] [nvarchar](100) NOT NULL,
	[book_subtitle] [nvarchar](100) NULL,
	[book_publisher] [int] NULL,
	[book_publishedDate] [date] NULL,
	[book_Description] [nvarchar](max) NULL,
	[book_status] [bit] NULL,
	[book_idate] [datetime] NULL,
	[book_iuser] [int] NULL,
	[book_udate] [datetime] NULL,
	[book_uuser] [int] NULL,
	[book_isbn10] [nvarchar](10) NULL,
	[book_isbn13] [nvarchar](13) NULL,
PRIMARY KEY CLUSTERED 
(
	[book_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_category]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_category](
	[category_kid] [int] IDENTITY(1,1) NOT NULL,
	[category_title] [nvarchar](100) NOT NULL,
	[category_status] [bit] NULL,
	[category_idate] [datetime] NULL,
	[category_iuser] [int] NULL,
	[category_udate] [datetime] NULL,
	[category_uuser] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[category_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_lnkbookAuthor]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_lnkbookAuthor](
	[lnkbookAuthor_kid] [int] IDENTITY(1,1) NOT NULL,
	[lnkbookAuthor_bookID] [int] NULL,
	[lnkbookAuthor_AuthorID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[lnkbookAuthor_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_lnkbookCategory]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_lnkbookCategory](
	[lnkbookCategory_kid] [int] IDENTITY(1,1) NOT NULL,
	[lnkbookCategory_bookID] [int] NULL,
	[lnkbookCategory_categoryID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[lnkbookCategory_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueToDept]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueToDept](
	[issueToDept_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueToDept_deptID] [int] NULL,
	[issueToDept_bookstockdetID] [int] NULL,
	[issueToDept_issuedate] [datetime] NULL,
	[issueToDept_iuser] [int] NULL,
	[issueToDept_status] [char](1) NULL,
	[issueToDept_rdate] [datetime] NULL,
	[issueToDept_issueToDeptMastId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueToDept_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueTostaff]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueTostaff](
	[issueTostaff_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueTostaff_staffID] [int] NULL,
	[issueTostaff_bookstockdetID] [int] NULL,
	[issueTostaff_issuedate] [datetime] NULL,
	[issueTostaff_iuser] [int] NULL,
	[issueTostaff_status] [char](1) NULL,
	[issueTostaff_rdate] [datetime] NULL,
	[issueToStaff_issueToStaffMastID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueTostaff_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueTostudent]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueTostudent](
	[issueTostudent_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueTostudent_studentID] [int] NULL,
	[issueTostudent_bookstockdetID] [int] NULL,
	[issueTostudent_issuedate] [datetime] NULL,
	[issueTostudent_iuser] [int] NULL,
	[issueTostudent_status] [char](1) NULL,
	[issueTostudent_rdate] [datetime] NULL,
	[issueTostudent_issueTostudentMastID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueTostudent_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_returnToDept]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_returnToDept](
	[returnToDept_kid] [int] IDENTITY(1,1) NOT NULL,
	[returnToDept_returndate] [datetime] NULL,
	[returnToDept_iuser] [int] NULL,
	[returnToDept_issuetoDeptID] [int] NULL,
	[returnToDept_fine] [decimal](18, 2) NULL,
	[returnToDept_remark] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[returnToDept_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_returnToStudent]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_returnToStudent](
	[returnToStudent_kid] [int] IDENTITY(1,1) NOT NULL,
	[returnToStudent_returndate] [datetime] NULL,
	[returnToStudent_iuser] [int] NULL,
	[returnToStudent_issuetoStudentID] [int] NULL,
	[returnToStudent_fine] [decimal](18, 2) NULL,
	[returnTostudent_remark] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[returnToStudent_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_returnToStaff]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_returnToStaff](
	[returnToStaff_kid] [int] IDENTITY(1,1) NOT NULL,
	[returnToStaff_returndate] [datetime] NULL,
	[returnToStaff_iuser] [int] NULL,
	[returnToStaff_issuetoStaffID] [int] NULL,
	[returnToStaff_fine] [decimal](18, 2) NULL,
	[returnTostaff_remark] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[returnToStaff_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_bookscrap]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_bookscrap](
	[bookscrap_kid] [int] IDENTITY(1,1) NOT NULL,
	[bookscrap_bookstockdet] [int] NULL,
	[bookscrap_remarks] [nvarchar](500) NULL,
	[bookscrap_idate] [datetime] NULL,
	[bookscrap_iusr] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[bookscrap_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_bookstockdet]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_bookstockdet](
	[bookstockdet_kid] [int] IDENTITY(1,1) NOT NULL,
	[bookstockdet_bookstockID] [int] NULL,
	[bookstockdet_bookid] [int] NULL,
	[bookstockdet_edition] [nvarchar](50) NULL,
	[bookstockdet_purDate] [date] NULL,
	[bookstockdet_price] [decimal](18, 2) NULL,
	[bookstockdet_bookrefID] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[bookstockdet_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[view_l_stockdet]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
create    view [dbo].[view_l_stockdet]
as
  
	select ROW_NUMBER() over (order by book_title ) row,bookstockdet_bookrefID,   book_title,   book_subtitle, book_isbn10,   book_isbn13,
	(SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	(SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   book_status,   book_kid,bookstockdet_edition,bookstockdet_kid,bookstockdet_price
	from  l_book , l_bookstockdet 
	where
	book_kid =bookstockdet_bookid and 
	bookstockdet_kid not  in 
		(select issueToDept_bookstockdetID from L_issueToDept where issueToDept_kid not in (select returnToDept_issuetoDeptID from L_returnTodept ))
		and  bookstockdet_kid not  in 
		(select issueToStaff_bookstockdetID from L_issueToStaff where issueToStaff_kid not in (select returnToStaff_issuetoStaffID from L_returnToStaff ))
		and  bookstockdet_kid not  in 
		(select issueToStudent_bookstockdetID from L_issueToStudent where issueToStudent_kid not in (select returnToStudent_issuetoStudentID from L_returnToStudent ))
		and  bookstockdet_kid not  in 
		(select bookscrap_bookstockdet from l_bookscrap )
		 
GO
/****** Object:  Table [dbo].[addon_FormatEditorPageRelation]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[addon_FormatEditorPageRelation](
	[FEPR_KID] [int] IDENTITY(1,1) NOT NULL,
	[FEPR_FormatID] [int] NOT NULL,
	[FEPR_PageID] [int] NOT NULL,
	[FEPR_Type] [varchar](10) NOT NULL,
	[FEPR_LinkID] [int] NULL,
	[FEPR_FormatType] [char](1) NULL,
 CONSTRAINT [PK_addon_FormatEditorPageRelation] PRIMARY KEY CLUSTERED 
(
	[FEPR_KID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[addon_LabelInfo]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[addon_LabelInfo](
	[Label_KID] [int] IDENTITY(1,1) NOT NULL,
	[label_Height] [varchar](10) NOT NULL,
	[label_Width] [varchar](10) NOT NULL,
	[Label_TopMargin] [varchar](5) NOT NULL,
	[Label_LeftMargin] [varchar](5) NOT NULL,
	[Label_StationaryType] [varchar](12) NOT NULL,
	[Label_FormatID] [int] NOT NULL,
	[Label_PageMargin] [varchar](15) NULL,
 CONSTRAINT [PK_addon_LabelInfo] PRIMARY KEY CLUSTERED 
(
	[Label_KID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[addon_macro]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[addon_macro](
	[macro_kid] [int] IDENTITY(1,1) NOT NULL,
	[macro_text] [nvarchar](150) NULL,
	[macro_value] [nvarchar](max) NULL,
	[macro_macroheadid] [int] NULL,
	[macro_flag] [char](1) NOT NULL,
 CONSTRAINT [PK_addon_macro] PRIMARY KEY CLUSTERED 
(
	[macro_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[addon_macrohead]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[addon_macrohead](
	[macrohead_kid] [int] IDENTITY(1,1) NOT NULL,
	[macrohead_name] [nvarchar](80) NOT NULL,
	[macrohead_moduleid] [int] NOT NULL,
	[macrohead_idate] [datetime] NOT NULL,
	[macrohead_iusrid] [int] NOT NULL,
	[macrohead_udate] [datetime] NULL,
	[macrohead_uusrid] [int] NULL,
	[macrohead_Parentid] [int] NULL,
 CONSTRAINT [PK_h_macrohead] PRIMARY KEY CLUSTERED 
(
	[macrohead_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[E_EmailActivity]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[E_EmailActivity](
	[EmailActivity_Name] [nvarchar](100) NULL,
	[EmailActivity_AddonProcedure] [nvarchar](100) NULL,
	[EmailActivity_PageNo] [int] NULL,
	[EmailActivity_status] [bit] NULL,
	[EmailActivity_iuserid] [int] NULL,
	[EmailActivity_idate] [datetime] NULL,
	[EmailActivity_uuserid] [int] NULL,
	[EmailActivity_udate] [datetime] NULL,
	[EmailActivity_mnumid] [int] NULL,
	[EmailActivity_linkTable] [nvarchar](100) NULL,
	[EmailActivity_Kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_E_EmailActivity] PRIMARY KEY CLUSTERED 
(
	[EmailActivity_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[E_EmailData]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[E_EmailData](
	[EmailData_EmailActivityId] [int] NULL,
	[EmailData_EmailId] [nvarchar](max) NULL,
	[EmailData_msg] [nvarchar](max) NULL,
	[EmailData_Sdate] [datetime] NULL,
	[EmailData_flag] [char](1) NULL,
	[EmailData_attachmentPath] [nvarchar](max) NULL,
	[EmailData_Subject] [nvarchar](100) NULL,
	[EmailData_EmailPtID1] [int] NULL,
	[EmailData_EmailPtID2] [int] NULL,
	[EmailData_EmailRecptID] [int] NULL,
	[EmailData_ExpiryDate] [datetime] NULL,
	[Emaildata_AttechFlag] [char](1) NULL,
	[EmailData_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_E_EmailData] PRIMARY KEY CLUSTERED 
(
	[EmailData_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[E_EmailFromat]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[E_EmailFromat](
	[EmailFromat_EmailActivityID] [int] NULL,
	[EmailFromat_EmailRecipientID] [int] NULL,
	[EmailFromat_Type] [char](1) NULL,
	[EmailFromat_DaysBefore] [int] NULL,
	[EmailFromat_StartTime] [nvarchar](100) NULL,
	[EmailFromat_TimeBefore] [int] NULL,
	[EmailFromat_TimeSpan] [int] NULL,
	[EmailFromat_Msg] [nvarchar](max) NULL,
	[EmailFromat_Attachments] [char](1) NULL,
	[EmailFromat_ExpiryHours] [int] NULL,
	[EmailFromat_Subject] [nvarchar](100) NULL,
	[EmailFromat_ExpiryTime] [int] NULL,
	[EmailFromat_EmailAttechmentFlag] [char](1) NULL,
	[EmailFromat_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_E_EmailFromat] PRIMARY KEY CLUSTERED 
(
	[EmailFromat_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[E_EmailRecipient]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[E_EmailRecipient](
	[EmailRecipient_Name] [nvarchar](100) NULL,
	[EmailRecipient_status] [bit] NULL,
	[EmailRecipient_iuserid] [int] NULL,
	[EmailRecipient_idate] [datetime] NULL,
	[EmailRecipient_uuserid] [int] NULL,
	[EmailRecipient_udate] [datetime] NULL,
	[EmailRecipient_code] [char](1) NULL,
	[EmailRecipient_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_E_EmailRecipient] PRIMARY KEY CLUSTERED 
(
	[EmailRecipient_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ErrorLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ErrorLog](
	[Error_number] [int] NULL,
	[Error_severity] [int] NULL,
	[ErrorSstate] [int] NULL,
	[ProcedureName] [varchar](max) NULL,
	[ErrorLine] [int] NULL,
	[error_message] [varchar](max) NULL,
	[error_Idate] [datetime] NULL,
	[error_manualdesc] [nvarchar](max) NULL,
	[error_userid] [int] NULL,
	[Error_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_ErrorLog] PRIMARY KEY CLUSTERED 
(
	[Error_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[h_EmailConfigSetting]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[h_EmailConfigSetting](
	[EmailConfigSetting_SmtpAddress] [nvarchar](100) NULL,
	[EmailConfigSetting_PortNo] [nvarchar](10) NULL,
	[EmailConfigSetting_FromEmail] [nvarchar](100) NULL,
	[EmailConfigSetting_password] [nvarchar](50) NULL,
	[EmailConfigSetting_iuserid] [int] NULL,
	[EmailConfigSetting_uuserid] [int] NULL,
	[EmailConfigSetting_idate] [datetime] NULL,
	[EmailConfigSetting_udate] [datetime] NULL,
	[EmailConfigSetting_default] [bit] NULL,
	[emailconfigsetting_SSL] [bit] NULL,
	[EmailConfigSetting_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_h_EmailConfigSetting] PRIMARY KEY CLUSTERED 
(
	[EmailConfigSetting_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Ayear]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Ayear](
	[Ayear_kid] [int] IDENTITY(1,1) NOT NULL,
	[Ayear_From] [date] NOT NULL,
	[Ayear_To] [date] NOT NULL,
	[Ayear_status] [bit] NOT NULL,
	[Ayear_date] [datetime] NOT NULL,
	[Ayear_usrid] [int] NOT NULL,
 CONSTRAINT [PK_L_Ayear] PRIMARY KEY CLUSTERED 
(
	[Ayear_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_AyearLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_AyearLog](
	[AyearLog_kid] [int] IDENTITY(1,1) NOT NULL,
	[AyearLog_From] [date] NOT NULL,
	[AyearLog_To] [date] NOT NULL,
	[AyearLog_status] [bit] NOT NULL,
	[AyearLog_date] [datetime] NOT NULL,
	[AyearLog_Ayearid] [int] NOT NULL,
	[AyearLog_usrid] [int] NOT NULL,
	[AyearLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK_L_AyearLog] PRIMARY KEY CLUSTERED 
(
	[AyearLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_batch]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_batch](
	[batch_kid] [int] IDENTITY(1,1) NOT NULL,
	[batch_name] [nvarchar](50) NULL,
	[batch_status] [bit] NULL,
	[batch_idate] [datetime] NULL,
	[batch_udate] [datetime] NULL,
	[batch_iusrid] [int] NULL,
	[batch_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[batch_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Bgrp]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Bgrp](
	[Bgrp_Kid] [int] IDENTITY(1,1) NOT NULL,
	[Bgrp_name] [nvarchar](5) NULL,
	[Bgrp_status] [bit] NULL,
 CONSTRAINT [PK_L_Bgrp] PRIMARY KEY CLUSTERED 
(
	[Bgrp_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_bookstock]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_bookstock](
	[bookstock_kid] [int] IDENTITY(1,1) NOT NULL,
	[bookstock_date] [date] NULL,
	[bookstock_userID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[bookstock_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_Branch]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_Branch](
	[Branch_kid] [int] IDENTITY(1,1) NOT NULL,
	[Branch_name] [nvarchar](50) NULL,
	[Branch_status] [bit] NULL,
	[Branch_idate] [datetime] NULL,
	[Branch_udate] [datetime] NULL,
	[Branch_iusrid] [int] NULL,
	[Branch_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Branch_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_Course]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_Course](
	[Course_kid] [int] IDENTITY(1,1) NOT NULL,
	[Course_name] [nvarchar](50) NULL,
	[Course_status] [bit] NULL,
	[Course_idate] [datetime] NULL,
	[Course_udate] [datetime] NULL,
	[Course_iusrid] [int] NULL,
	[Course_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Course_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Dept]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Dept](
	[Dept_kid] [int] IDENTITY(1,1) NOT NULL,
	[Dept_name] [nvarchar](100) NULL,
	[Dept_status] [bit] NULL,
	[Dept_idate] [datetime] NULL,
	[Dept_iusrid] [int] NULL,
	[Dept_udate] [datetime] NULL,
	[Dept_uusrid] [int] NULL,
	[Dept_Img] [nvarchar](max) NULL,
	[dept_incharge] [int] NULL,
 CONSTRAINT [PK_L_Dept] PRIMARY KEY CLUSTERED 
(
	[Dept_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_designation]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_designation](
	[designation_kid] [int] IDENTITY(1,1) NOT NULL,
	[designation_name] [nvarchar](50) NULL,
	[designation_status] [bit] NULL,
	[designation_idate] [datetime] NULL,
	[designation_udate] [datetime] NULL,
	[designation_iusrid] [int] NULL,
	[designation_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[designation_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_File]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_File](
	[File_Kid] [int] IDENTITY(1,1) NOT NULL,
	[File_Path] [nvarchar](max) NULL,
	[File_id] [int] NULL,
	[File_Type] [int] NULL,
 CONSTRAINT [PK_L_File] PRIMARY KEY CLUSTERED 
(
	[File_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_finemast]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_finemast](
	[finemast_kid] [int] IDENTITY(1,1) NOT NULL,
	[finemast_userType] [char](1) NOT NULL,
	[finemast_finetype] [char](1) NOT NULL,
	[finemast_Amt] [decimal](18, 2) NULL,
	[finemast_iusr] [int] NULL,
	[finemast_uusr] [int] NULL,
	[finemast_idate] [date] NULL,
	[finemast_udate] [date] NULL,
PRIMARY KEY CLUSTERED 
(
	[finemast_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_finemastdet]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_finemastdet](
	[finemastdet_kid] [int] IDENTITY(1,1) NOT NULL,
	[finemastdet_from] [int] NULL,
	[finemastdet_to] [int] NULL,
	[finemastdet_amt] [decimal](18, 2) NULL,
	[finemastdet_finemastID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[finemastdet_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Format]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Format](
	[Format_kid] [int] IDENTITY(1,1) NOT NULL,
	[Format_Ename] [nvarchar](100) NOT NULL,
	[Format_SPName] [nvarchar](200) NOT NULL,
	[Format_mnumid] [int] NOT NULL,
	[Format_linkTable] [nvarchar](50) NULL,
	[Format_idate] [datetime] NOT NULL,
 CONSTRAINT [PK_L_Format] PRIMARY KEY CLUSTERED 
(
	[Format_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_formatTemplate]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_formatTemplate](
	[FormatTemplate_kid] [int] IDENTITY(1,1) NOT NULL,
	[FormatTemplate_Formatid] [int] NOT NULL,
	[FormatTemplate_Parentid] [int] NULL,
	[FormatTemplate_Ename] [nvarchar](100) NOT NULL,
	[FormatTemplate_Status] [bit] NOT NULL,
	[FormatTemplate_Format] [nvarchar](max) NULL,
	[FormatTemplate_PageType] [nvarchar](15) NULL,
	[FormatTemplate_PageOrientation] [char](1) NULL,
	[FormatTemplate_PageLeftMargin] [int] NULL,
	[FormatTemplate_PageRightMargin] [int] NULL,
	[FormatTemplate_HeaderBodyMargin] [int] NULL,
	[FormatTemplate_BodyFooterMargin] [int] NULL,
	[FormatTemplate_Ftype] [char](2) NULL,
	[FormatTemplate_FooterPageNoShow] [char](1) NULL,
	[FormatTemplate_FooterPageNoColor] [nvarchar](50) NULL,
	[Formattemplate_fdate] [date] NULL,
	[Formattemplate_tdate] [date] NULL,
	[FormatTemplate_idate] [datetime] NOT NULL,
	[FormatTemplate_Udate] [datetime] NULL,
	[FormatTemplate_iusrid] [int] NULL,
	[FormatTemplate_uusrid] [int] NULL,
 CONSTRAINT [PK_L_formatTemplate] PRIMARY KEY CLUSTERED 
(
	[FormatTemplate_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Fyear]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Fyear](
	[Fyear_kid] [int] IDENTITY(1,1) NOT NULL,
	[Fyear_From] [date] NOT NULL,
	[Fyear_To] [date] NOT NULL,
	[Fyear_status] [bit] NOT NULL,
	[Fyear_date] [datetime] NOT NULL,
	[Fyear_usrid] [int] NOT NULL,
 CONSTRAINT [PK_L_Fyear] PRIMARY KEY CLUSTERED 
(
	[Fyear_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_FyearLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_FyearLog](
	[FyearLog_kid] [int] IDENTITY(1,1) NOT NULL,
	[FyearLog_From] [date] NOT NULL,
	[FyearLog_To] [date] NOT NULL,
	[FyearLog_status] [bit] NOT NULL,
	[FyearLog_date] [datetime] NOT NULL,
	[FyearLog_Fyearid] [int] NOT NULL,
	[FyearLog_usrid] [int] NOT NULL,
	[FyearLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK_L_FyearLog] PRIMARY KEY CLUSTERED 
(
	[FyearLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Gender]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Gender](
	[Gender_kid] [int] IDENTITY(1,1) NOT NULL,
	[Gender_name] [nvarchar](20) NULL,
	[Gender_status] [bit] NULL,
	[Gender_idate] [datetime] NULL,
	[Gender_iusrid] [int] NULL,
	[Gender_udate] [datetime] NULL,
	[Gender_uusrid] [int] NULL,
 CONSTRAINT [PK_L_Gender] PRIMARY KEY CLUSTERED 
(
	[Gender_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueToDeptMast]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueToDeptMast](
	[issueToDeptMast_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueToDeptMast_date] [date] NULL,
	[issueToDeptMast_USER] [int] NULL,
	[issueToDeptMast_DeptID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueToDeptMast_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueToStaffMast]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueToStaffMast](
	[issueToStaffMast_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueToStaffMast_date] [date] NULL,
	[issueToStaffMast_USER] [int] NULL,
	[issueToStaffMast_staffID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueToStaffMast_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_issueToStudentMast]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_issueToStudentMast](
	[issueToStudentMast_kid] [int] IDENTITY(1,1) NOT NULL,
	[issueToStudentMast_date] [date] NULL,
	[issueToStudentMast_USER] [int] NULL,
	[issueToStudentMast_staffID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[issueToStudentMast_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_itemGroup]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_itemGroup](
	[itemGroup_kid] [int] IDENTITY(1,1) NOT NULL,
	[itemGroup_name] [nvarchar](50) NULL,
	[itemGroup_status] [bit] NULL,
	[itemGroup_idate] [datetime] NULL,
	[itemGroup_udate] [datetime] NULL,
	[itemGroup_iusrid] [int] NULL,
	[itemGroup_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[itemGroup_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Link_FT_LinkTable]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Link_FT_LinkTable](
	[Link_FT_LinkTable_Kid] [int] IDENTITY(1,1) NOT NULL,
	[Link_FT_LinkTable_Formattemplateid] [int] NOT NULL,
	[Link_FT_LinkTable_PageLinkid] [int] NOT NULL,
 CONSTRAINT [PK_h_Link_FT_LinkTable] PRIMARY KEY CLUSTERED 
(
	[Link_FT_LinkTable_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Link_HF_FT]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Link_HF_FT](
	[Link_formatTemplateid] [int] NOT NULL,
	[Link_Headerid] [int] NULL,
	[Link_Footerid] [int] NULL,
	[Link_otherHeaderid] [int] NULL,
	[Link_LastPagefooterid] [int] NULL,
	[Link_HF_FT_Kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_L_Link_HF_FT] PRIMARY KEY CLUSTERED 
(
	[Link_HF_FT_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_lnkbookshelf]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_lnkbookshelf](
	[lnkbookshelf_kid] [int] IDENTITY(1,1) NOT NULL,
	[lnkbookshelf_shelfId] [int] NULL,
	[lnkbookshelf_bookID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[lnkbookshelf_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_mnum]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_mnum](
	[mnum_name] [nvarchar](100) NULL,
	[mnum_ParentID] [int] NULL,
	[mnum_order] [int] NULL,
	[mnum_redirectto] [varchar](1000) NULL,
	[mnum_status] [bit] NULL,
	[mnum_kid] [int] IDENTITY(1,1) NOT NULL,
	[mnum_image] [nvarchar](100) NULL,
 CONSTRAINT [PK_h_mnum] PRIMARY KEY CLUSTERED 
(
	[mnum_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_MnumLnkRole]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_MnumLnkRole](
	[MnumLnkRole_kid] [int] IDENTITY(1,1) NOT NULL,
	[MnumLnkRole_UserRoleID] [int] NULL,
	[MnumLnkRole_MnumID] [int] NULL,
	[MnumLnkRole_iusrid] [int] NULL,
	[MnumLnkRole_idate] [datetime] NULL,
 CONSTRAINT [PK_L_MnumLnkRole] PRIMARY KEY CLUSTERED 
(
	[MnumLnkRole_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_notification]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_notification](
	[notification_kID] [int] IDENTITY(1,1) NOT NULL,
	[notification_msg] [nvarchar](max) NULL,
	[notification_docId] [int] NULL,
	[notification_LabId] [int] NULL,
	[notification_usrId] [int] NULL,
	[notification_status] [bit] NULL,
 CONSTRAINT [PK_L_notification] PRIMARY KEY CLUSTERED 
(
	[notification_kID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysA]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysA](
	[NumsysA_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysA_numTypeId] [int] NOT NULL,
	[NumsysA_pre] [nvarchar](10) NULL,
	[NumsysA_presept] [nvarchar](3) NULL,
	[NumsysA_Format] [nvarchar](10) NULL,
	[NumsysA_FormatprePost] [char](1) NULL,
	[NumsysA_No] [decimal](12, 0) NOT NULL,
	[NumsysA_postsept] [nvarchar](10) NULL,
	[NumsysA_Post] [nvarchar](10) NULL,
	[NumsysA_Length] [decimal](2, 0) NOT NULL,
	[NumsysA_date] [datetime] NULL,
	[NumsysA_usrid] [int] NOT NULL,
	[NumsysA_year] [nvarchar](4) NOT NULL,
	[NumsysA_Ayearid] [int] NOT NULL,
 CONSTRAINT [PK_L_NumSysA] PRIMARY KEY CLUSTERED 
(
	[NumsysA_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumsysALog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumsysALog](
	[NumsysALog_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysALog_numsysAid] [int] NOT NULL,
	[NumsysALog_numTypeId] [int] NOT NULL,
	[NumsysALog_pre] [nvarchar](10) NULL,
	[NumsysALog_presept] [nvarchar](3) NULL,
	[NumsysALog_Format] [nvarchar](10) NULL,
	[NumsysALog_FormatprePost] [char](1) NULL,
	[NumsysALog_No] [decimal](12, 0) NOT NULL,
	[NumsysALog_postsept] [nvarchar](10) NULL,
	[NumsysALog_Post] [nvarchar](10) NULL,
	[NumsysALog_Length] [decimal](2, 0) NOT NULL,
	[NumsysALog_date] [datetime] NULL,
	[NumsysALog_usrid] [int] NOT NULL,
	[NumsysALog_year] [nvarchar](4) NOT NULL,
	[NumsysALog_Ayearid] [int] NOT NULL,
	[NumsysALog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK_L_NumsysALog] PRIMARY KEY CLUSTERED 
(
	[NumsysALog_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysC]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysC](
	[NumSysC_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumSysC_NumTypeId] [int] NOT NULL,
	[NumSysC_Pre] [nvarchar](10) NULL,
	[NumSysC_Post] [nvarchar](10) NULL,
	[NumSysC_Length] [decimal](2, 0) NOT NULL,
	[NumSysC_No] [decimal](12, 0) NOT NULL,
	[NumSysC_Date] [datetime] NOT NULL,
	[NumSysC_UsrId] [int] NOT NULL,
 CONSTRAINT [PK__L_NumSy__4A67B8E59B4D28C0] PRIMARY KEY CLUSTERED 
(
	[NumSysC_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysCLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysCLog](
	[NumSysCLog_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumSysCLog_NumTypeId] [int] NOT NULL,
	[NumSysCLog_Pre] [nvarchar](10) NULL,
	[NumSysCLog_Post] [nvarchar](10) NULL,
	[NumSysCLog_Length] [decimal](2, 0) NOT NULL,
	[NumSysCLog_No] [decimal](12, 0) NOT NULL,
	[NumSysCLog_Date] [datetime] NOT NULL,
	[NumSysCLog_UsrId] [int] NOT NULL,
	[NumSysCLog_NumSysCId] [int] NOT NULL,
	[NumSysCLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK__L_NumSy__129528B1072F7FD6] PRIMARY KEY CLUSTERED 
(
	[NumSysCLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysD]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysD](
	[NumSysD_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumSysD_NumTypeId] [int] NOT NULL,
	[NumSysD_Pre] [nvarchar](10) NULL,
	[NumSysD_PreSept] [nvarchar](3) NULL,
	[NumSysD_Format] [nvarchar](10) NULL,
	[NumSysD_FormatPrePost] [char](1) NULL,
	[NumSysD_No] [decimal](12, 0) NOT NULL,
	[NumSysD_Post] [nvarchar](10) NULL,
	[NumSysD_PostSept] [nvarchar](3) NULL,
	[NumSysD_Length] [decimal](2, 0) NOT NULL,
	[NumSysD_date] [datetime] NOT NULL,
	[NumSysD_usrId] [int] NOT NULL,
	[NumSysD_CDate] [date] NOT NULL,
 CONSTRAINT [PK__L_NumSy__6E2B1AABE9CA9207] PRIMARY KEY CLUSTERED 
(
	[NumSysD_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysDLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysDLog](
	[NumSysDLog_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumSysDLog_NumTypeId] [int] NOT NULL,
	[NumSysDLog_Pre] [nvarchar](10) NULL,
	[NumSysDLog_PreSept] [nvarchar](3) NULL,
	[NumSysDLog_Format] [nvarchar](10) NULL,
	[NumSysDLog_FormatPrePost] [char](1) NULL,
	[NumSysDLog_No] [decimal](12, 0) NOT NULL,
	[NumSysDLog_Post] [nvarchar](10) NULL,
	[NumSysDLog_PostSept] [nvarchar](3) NULL,
	[NumSysDLog_Length] [decimal](2, 0) NOT NULL,
	[NumSysDLog_date] [datetime] NOT NULL,
	[NumSysDLog_usrId] [int] NOT NULL,
	[NumSysDLog_CDate] [date] NOT NULL,
	[NumSysDLog_NumSysDId] [int] NOT NULL,
	[NumSysDLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK__L_NumSy__E7F9E9B56620290C] PRIMARY KEY CLUSTERED 
(
	[NumSysDLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysF]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysF](
	[NumsysF_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysF_numTypeId] [int] NOT NULL,
	[NumsysF_pre] [nvarchar](10) NULL,
	[NumsysF_presept] [nvarchar](3) NULL,
	[NumsysF_Format] [nvarchar](10) NULL,
	[NumsysF_FormatprePost] [char](1) NULL,
	[NumsysF_No] [decimal](12, 0) NOT NULL,
	[NumsysF_postsept] [nvarchar](10) NULL,
	[NumsysF_Post] [nvarchar](10) NULL,
	[NumsysF_Length] [decimal](2, 0) NOT NULL,
	[NumsysF_date] [datetime] NULL,
	[NumsysF_usrid] [int] NOT NULL,
	[NumsysF_year] [nvarchar](4) NOT NULL,
	[NumsysF_Fyearid] [int] NOT NULL,
 CONSTRAINT [PK_L_NumSysF] PRIMARY KEY CLUSTERED 
(
	[NumsysF_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysFLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysFLog](
	[NumsysFLog_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysFLog_numTypeId] [int] NOT NULL,
	[NumsysFLog_numsysFid] [int] NOT NULL,
	[NumsysFLog_pre] [nvarchar](10) NULL,
	[NumsysFLog_presept] [nvarchar](3) NULL,
	[NumsysFLog_Format] [nvarchar](10) NULL,
	[NumsysFLog_FormatprePost] [char](1) NULL,
	[NumsysFLog_No] [decimal](12, 0) NOT NULL,
	[NumsysFLog_postsept] [nvarchar](10) NULL,
	[NumsysFLog_Post] [nvarchar](10) NULL,
	[NumsysFLog_Length] [decimal](2, 0) NOT NULL,
	[NumsysFLog_date] [datetime] NULL,
	[NumsysFLog_usrid] [int] NOT NULL,
	[NumsysFLog_year] [nvarchar](4) NOT NULL,
	[NumsysFLog_Fyearid] [int] NOT NULL,
	[NumsysFLog_Action] [char](1) NULL,
 CONSTRAINT [PK_L_NumSysFLog] PRIMARY KEY CLUSTERED 
(
	[NumsysFLog_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysM]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysM](
	[NumsysM_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysM_numTypeId] [int] NOT NULL,
	[NumsysM_pre] [nvarchar](10) NULL,
	[NumsysM_presept] [nvarchar](3) NULL,
	[NumsysM_Format] [nvarchar](10) NULL,
	[NumsysM_FormatprePost] [char](1) NULL,
	[NumsysM_No] [decimal](12, 0) NOT NULL,
	[NumsysM_postsept] [nvarchar](10) NULL,
	[NumsysM_Post] [nvarchar](10) NULL,
	[NumsysM_Length] [decimal](2, 0) NOT NULL,
	[NumsysM_date] [datetime] NULL,
	[NumsysM_usrid] [int] NOT NULL,
	[NumsysM_year] [nvarchar](4) NOT NULL,
	[NumsysM_Month] [nvarchar](2) NOT NULL,
 CONSTRAINT [PK_L_NumSysM] PRIMARY KEY CLUSTERED 
(
	[NumsysM_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysMLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysMLog](
	[NumsysMLog_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysMLog_numTypeId] [int] NOT NULL,
	[NumsysMLog_pre] [nvarchar](10) NULL,
	[NumsysMLog_presept] [nvarchar](3) NULL,
	[NumsysMLog_Format] [nvarchar](10) NULL,
	[NumsysMLog_FormatprePost] [char](1) NULL,
	[NumsysMLog_No] [decimal](12, 0) NOT NULL,
	[NumsysMLog_postsept] [nvarchar](10) NULL,
	[NumsysMLog_Post] [nvarchar](10) NULL,
	[NumsysMLog_Length] [decimal](2, 0) NOT NULL,
	[NumsysMLog_date] [datetime] NULL,
	[NumsysMLog_usrid] [int] NOT NULL,
	[NumsysMLog_year] [nvarchar](4) NOT NULL,
	[NumsysMLog_Month] [nvarchar](2) NOT NULL,
	[NumsysMLog_NumsysMid] [int] NOT NULL,
	[NumsysMLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK_L_NumSysMLog] PRIMARY KEY CLUSTERED 
(
	[NumsysMLog_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumSysY]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumSysY](
	[NumsysY_Kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysY_numTypeId] [int] NOT NULL,
	[NumsysY_pre] [nvarchar](10) NULL,
	[NumsysY_presept] [nvarchar](3) NULL,
	[NumsysY_Format] [nvarchar](10) NULL,
	[NumsysY_FormatprePost] [char](1) NULL,
	[NumsysY_No] [decimal](12, 0) NOT NULL,
	[NumsysY_postsept] [nvarchar](10) NULL,
	[NumsysY_Post] [nvarchar](10) NULL,
	[NumsysY_Length] [decimal](2, 0) NOT NULL,
	[NumsysY_date] [datetime] NULL,
	[NumsysY_usrid] [int] NOT NULL,
	[NumsysY_year] [nvarchar](4) NOT NULL,
 CONSTRAINT [PK_L_NumSysY] PRIMARY KEY CLUSTERED 
(
	[NumsysY_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumsysYlog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumsysYlog](
	[NumsysYlog_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumsysYlog_NumsysYid] [int] NOT NULL,
	[NumsysYlog_numtypeid] [int] NOT NULL,
	[NumsysYlog_pre] [nvarchar](10) NULL,
	[NumsysYlog_presept] [nvarchar](3) NULL,
	[NumsysYlog_format] [nvarchar](10) NULL,
	[NumsysYlog_formatprepost] [char](1) NULL,
	[NumsysYlog_no] [decimal](12, 0) NOT NULL,
	[NumsysYlog_postsept] [nvarchar](10) NULL,
	[NumsysYlog_post] [nvarchar](10) NULL,
	[NumsysYlog_Length] [decimal](2, 0) NOT NULL,
	[NumsysYlog_usrid] [int] NOT NULL,
	[NumsysYlog_date] [datetime] NULL,
	[NumsysYlog_Year] [nvarchar](4) NULL,
	[NumsysYlog_Action] [char](1) NULL,
 CONSTRAINT [PK_L_NumsysYlog] PRIMARY KEY CLUSTERED 
(
	[NumsysYlog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumType]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumType](
	[NumType_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumType_type] [nvarchar](5) NOT NULL,
	[NumType_format] [char](1) NOT NULL,
	[NumType_date] [datetime] NOT NULL,
	[NumType_usrid] [int] NOT NULL,
	[NumType_status] [bit] NOT NULL,
	[NumType_formatzid] [nvarchar](10) NULL,
	[NumType_fullname] [nvarchar](100) NULL,
 CONSTRAINT [PK__L_NumTy__68B771A5E7C88C3E] PRIMARY KEY CLUSTERED 
(
	[NumType_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_NumTypeLog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_NumTypeLog](
	[NumTypeLog_kid] [int] IDENTITY(1,1) NOT NULL,
	[NumTypeLog_type] [nvarchar](5) NOT NULL,
	[NumTypeLog_format] [char](1) NOT NULL,
	[NumTypeLog_date] [datetime] NOT NULL,
	[NumTypeLog_usrid] [int] NOT NULL,
	[NumTypeLog_status] [bit] NOT NULL,
	[NumTypeLog_formatzid] [nvarchar](10) NULL,
	[NumTypeLog_numtypeid] [int] NOT NULL,
	[NumTypeLog_Action] [char](1) NOT NULL,
 CONSTRAINT [PK__L_NumTy__197A6C08FCD5C29F] PRIMARY KEY CLUSTERED 
(
	[NumTypeLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_PaperType]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_PaperType](
	[PaperType_Kid] [int] IDENTITY(1,1) NOT NULL,
	[PaperType_Name] [nvarchar](50) NULL,
	[PaperType_Height] [float] NULL,
	[PaperType_Width] [float] NULL,
	[PaperType_IuserId] [int] NULL,
	[PaperType_Idate] [datetime] NULL,
	[PaperType_UuserId] [int] NULL,
	[PaperType_Udate] [datetime] NULL,
 CONSTRAINT [PK_L_PaperType] PRIMARY KEY CLUSTERED 
(
	[PaperType_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_par]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_par](
	[par_kid] [int] IDENTITY(1,1) NOT NULL,
	[par_maxstudentdays] [int] NULL,
	[par_maxstaffdays] [int] NULL,
	[par_maxdeptdays] [int] NULL,
	[par_maxbooktostudent] [int] NULL,
	[par_maxbooktodepartment] [int] NULL,
	[par_maxbooktostaff] [int] NULL,
	[par_collegeName] [nvarchar](200) NULL,
	[par_contact] [nvarchar](50) NULL,
	[par_email] [nvarchar](100) NULL,
	[par_address] [nvarchar](200) NULL,
	[par_date] [datetime] NULL,
	[par_user] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[par_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_rack]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_rack](
	[rack_kid] [int] IDENTITY(1,1) NOT NULL,
	[rack_name] [nvarchar](50) NULL,
	[rack_status] [bit] NULL,
	[rack_idate] [datetime] NULL,
	[rack_udate] [datetime] NULL,
	[rack_iusrid] [int] NULL,
	[rack_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[rack_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_returnChecklist]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_returnChecklist](
	[returnChecklist_kid] [int] IDENTITY(1,1) NOT NULL,
	[returnChecklist_name] [nvarchar](50) NULL,
	[returnChecklist_status] [bit] NULL,
	[returnChecklist_idate] [datetime] NULL,
	[returnChecklist_udate] [datetime] NULL,
	[returnChecklist_iusrid] [int] NULL,
	[returnChecklist_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[returnChecklist_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_shelf]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_shelf](
	[shelf_kid] [int] IDENTITY(1,1) NOT NULL,
	[shelf_name] [nvarchar](50) NULL,
	[shelf_rack] [int] NULL,
	[shelf_status] [bit] NULL,
	[shelf_idate] [datetime] NULL,
	[shelf_udate] [datetime] NULL,
	[shelf_iusrid] [int] NULL,
	[shelf_uusrid] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[shelf_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_staff]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_staff](
	[staff_kid] [int] IDENTITY(1,1) NOT NULL,
	[staff_name] [nvarchar](100) NULL,
	[staff_status] [bit] NULL,
	[staff_idate] [datetime] NULL,
	[staff_udate] [datetime] NULL,
	[staff_iusrid] [int] NULL,
	[staff_uusrid] [int] NULL,
	[staff_parent] [nvarchar](50) NULL,
	[staff_gender] [char](1) NULL,
	[staff_Mob_No] [nvarchar](20) NULL,
	[staff_Address] [nvarchar](100) NULL,
	[staff_DOJ] [date] NULL,
	[staff_Designationid] [int] NULL,
	[staff_Deptid] [int] NULL,
	[staff_Photo] [nvarchar](100) NULL,
	[staff_EmailID] [nvarchar](50) NULL,
	[staff_staffID] [nvarchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[staff_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_student]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_student](
	[student_kid] [int] IDENTITY(1,1) NOT NULL,
	[student_name] [nvarchar](50) NULL,
	[student_status] [bit] NULL,
	[student_idate] [datetime] NULL,
	[student_udate] [datetime] NULL,
	[student_iusrid] [int] NULL,
	[student_uusrid] [int] NULL,
	[student_parent] [nvarchar](100) NULL,
	[student_gender] [char](1) NULL,
	[student_Mob_No] [nvarchar](20) NULL,
	[student_Address] [nvarchar](200) NULL,
	[student_DOJ] [date] NULL,
	[student_Course] [int] NULL,
	[student_Branch] [int] NULL,
	[student_Photo] [nvarchar](100) NULL,
	[student_EmailID] [nvarchar](50) NULL,
	[student_stID] [nvarchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[student_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_supp]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_supp](
	[supp_kid] [int] IDENTITY(1,1) NOT NULL,
	[supp_code] [nvarchar](20) NULL,
	[supp_ename] [nvarchar](100) NOT NULL,
	[supp_city] [nvarchar](50) NULL,
	[supp_state] [nvarchar](50) NULL,
	[supp_phone] [nvarchar](100) NULL,
	[supp_add1] [nvarchar](200) NULL,
	[supp_contname] [nvarchar](50) NULL,
	[supp_contphone] [nvarchar](50) NULL,
	[supp_status] [bit] NULL,
	[supp_Email] [nvarchar](100) NULL,
	[supp_GSTIN] [nvarchar](50) NULL,
	[supp_idate] [datetime] NULL,
	[supp_udate] [datetime] NULL,
	[supp_iusrid] [int] NULL,
	[supp_uusrid] [int] NULL,
	[supp_pincode] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[supp_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_Title]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_Title](
	[Title_kid] [int] IDENTITY(1,1) NOT NULL,
	[Title_name] [nvarchar](20) NULL,
	[Title_status] [bit] NULL,
	[Title_idate] [datetime] NULL,
	[Title_iusrid] [int] NULL,
	[Title_udate] [datetime] NULL,
	[Title_uusrid] [int] NULL,
	[Title_genderID] [int] NULL,
	[Title_Relation] [nvarchar](50) NULL,
 CONSTRAINT [PK_L_Title] PRIMARY KEY CLUSTERED 
(
	[Title_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[l_usr]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[l_usr](
	[usr_kid] [int] IDENTITY(1,1) NOT NULL,
	[usr_name] [nvarchar](100) NULL,
	[usr_code] [nvarchar](10) NULL,
	[usr_Pswd] [nvarchar](max) NULL,
	[usr_Status] [bit] NULL,
	[usr_UserRoleID] [int] NULL,
	[usr_idate] [datetime] NULL,
	[usr_iusrid] [int] NULL,
	[usr_udate] [datetime] NULL,
	[usr_uusrID] [int] NULL,
	[usr_contact] [nvarchar](20) NULL,
	[usr_id] [int] NULL,
	[usr_login] [bit] NULL,
	[usr_email] [nvarchar](50) NULL,
	[usr_staffID] [int] NULL,
	[usr_studentID] [int] NULL,
 CONSTRAINT [PK_L_usr] PRIMARY KEY CLUSTERED 
(
	[usr_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[L_UsrAgreement]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[L_UsrAgreement](
	[UsrAgreement_Kid] [int] IDENTITY(1,1) NOT NULL,
	[UsrAgreement_Type] [char](1) NULL,
	[UsrAgreement_Text] [nvarchar](max) NULL,
	[UsrAgreement_idate] [datetime] NULL,
	[UsrAgreement_UsrRole] [int] NULL,
 CONSTRAINT [PK_L_UsrAgreement] PRIMARY KEY CLUSTERED 
(
	[UsrAgreement_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMS_SMSActivity]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMS_SMSActivity](
	[SMSActivity_Name] [nvarchar](max) NOT NULL,
	[SMSActivity_AddonProcedure] [nvarchar](max) NULL,
	[smsactivity_Type] [char](1) NULL,
	[smsactivity_Status] [bit] NULL,
	[SMSActivity_Kid] [int] IDENTITY(1,1) NOT NULL,
	[SMSActivity_Mas] [nvarchar](10) NULL,
 CONSTRAINT [PK_SMS_SMSActivity] PRIMARY KEY CLUSTERED 
(
	[SMSActivity_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMS_SMSConfig]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMS_SMSConfig](
	[SMSConfig_ConfigName] [nvarchar](max) NOT NULL,
	[SMSConfig_CommonPart] [nvarchar](max) NOT NULL,
	[SMSConfig_ForMobile] [nvarchar](max) NOT NULL,
	[SMSConfig_ForMessage] [nvarchar](max) NOT NULL,
	[SMSConfig_Default] [bit] NOT NULL,
	[SMSConfig_Date] [datetime] NOT NULL,
	[SMSConfig_Kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_SMS_SMSConfig] PRIMARY KEY CLUSTERED 
(
	[SMSConfig_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMS_SMSData]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMS_SMSData](
	[SMSData_SMSActivityID] [int] NULL,
	[SMSData_MobNo] [nvarchar](10) NOT NULL,
	[SMSData_Msg] [nvarchar](max) NOT NULL,
	[SMSData_Sdate] [datetime] NOT NULL,
	[smsdata_flag] [char](1) NOT NULL,
	[SMSData_Kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_SMS_SMSData] PRIMARY KEY CLUSTERED 
(
	[SMSData_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[sms_smslog]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[sms_smslog](
	[SmsLog_smsMobNo] [nvarchar](10) NULL,
	[SmsLog_Idate] [datetime] NULL,
	[smslog_smskid] [int] NULL,
	[sms_msgDetail] [nvarchar](max) NULL,
	[Smslog_msgtext] [nvarchar](max) NULL,
	[SmsLog_kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_sms_smslog] PRIMARY KEY CLUSTERED 
(
	[SmsLog_kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMS_SMSSchedule]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMS_SMSSchedule](
	[SMSSchedule_SMSActivityID] [int] NULL,
	[SMSSchedule_Type] [char](1) NULL,
	[SMSSchedule_DaysBefore] [int] NULL,
	[SMSSchedule_StartTime] [nvarchar](max) NULL,
	[SMSSchedule_TimeBefore] [int] NULL,
	[SMSSchedule_TimeSpan] [int] NULL,
	[SMSSchedule_Msg] [nvarchar](max) NULL,
	[SMSSchedule_Kid] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_SMS_SMSSchedule] PRIMARY KEY CLUSTERED 
(
	[SMSSchedule_Kid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tbl_folder]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbl_folder](
	[FolderName] [nvarchar](50) NOT NULL,
	[FolderID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_tbl_folder] PRIMARY KEY CLUSTERED 
(
	[FolderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tbl_image]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbl_image](
	[FolderID] [int] NOT NULL,
	[Image] [nvarchar](50) NOT NULL,
	[ImageID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_tbl_image] PRIMARY KEY CLUSTERED 
(
	[ImageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TestName]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestName](
	[Test Group] [nvarchar](255) NULL,
	[Test Name] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserRole]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserRole](
	[UserRoleKid] [int] IDENTITY(1,1) NOT NULL,
	[UserRoleName] [nvarchar](100) NULL,
	[UserRoleIdate] [datetime] NULL,
	[UserRoleIuserId] [int] NULL,
	[UserRoleUdate] [datetime] NULL,
	[UserRoleUuserId] [int] NULL,
	[UserRoleStatus] [bit] NULL,
 CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED 
(
	[UserRoleKid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[addon_macrohead] ADD  CONSTRAINT [DF_h_macrohead_macrohead_idate]  DEFAULT (getdate()) FOR [macrohead_idate]
GO
ALTER TABLE [dbo].[E_EmailData] ADD  CONSTRAINT [DF_E_EmailData_EmailData_flag]  DEFAULT ('P') FOR [EmailData_flag]
GO
ALTER TABLE [dbo].[ErrorLog] ADD  CONSTRAINT [DF_ErrorLog_error_Idate]  DEFAULT (getdate()) FOR [error_Idate]
GO
ALTER TABLE [dbo].[l_author] ADD  DEFAULT ((1)) FOR [author_status]
GO
ALTER TABLE [dbo].[l_author] ADD  DEFAULT (getdate()) FOR [author_idate]
GO
ALTER TABLE [dbo].[L_Ayear] ADD  CONSTRAINT [DF_L_Ayear_Ayear_status]  DEFAULT ((1)) FOR [Ayear_status]
GO
ALTER TABLE [dbo].[L_Ayear] ADD  CONSTRAINT [DF_L_Ayear_Ayear_date]  DEFAULT (getdate()) FOR [Ayear_date]
GO
ALTER TABLE [dbo].[L_AyearLog] ADD  CONSTRAINT [DF_L_AyearLog_AyearLog_status]  DEFAULT ((1)) FOR [AyearLog_status]
GO
ALTER TABLE [dbo].[L_AyearLog] ADD  CONSTRAINT [DF_L_AyearLog_AyearLog_date]  DEFAULT (getdate()) FOR [AyearLog_date]
GO
ALTER TABLE [dbo].[l_batch] ADD  DEFAULT ((1)) FOR [batch_status]
GO
ALTER TABLE [dbo].[l_batch] ADD  DEFAULT (getdate()) FOR [batch_idate]
GO
ALTER TABLE [dbo].[l_book] ADD  DEFAULT ((1)) FOR [book_status]
GO
ALTER TABLE [dbo].[l_book] ADD  DEFAULT (getdate()) FOR [book_idate]
GO
ALTER TABLE [dbo].[l_bookscrap] ADD  DEFAULT (getdate()) FOR [bookscrap_idate]
GO
ALTER TABLE [dbo].[l_Branch] ADD  DEFAULT ((1)) FOR [Branch_status]
GO
ALTER TABLE [dbo].[l_Branch] ADD  DEFAULT (getdate()) FOR [Branch_idate]
GO
ALTER TABLE [dbo].[l_category] ADD  DEFAULT ((1)) FOR [category_status]
GO
ALTER TABLE [dbo].[l_category] ADD  DEFAULT (getdate()) FOR [category_idate]
GO
ALTER TABLE [dbo].[l_Course] ADD  DEFAULT ((1)) FOR [Course_status]
GO
ALTER TABLE [dbo].[l_Course] ADD  DEFAULT (getdate()) FOR [Course_idate]
GO
ALTER TABLE [dbo].[l_designation] ADD  DEFAULT ((1)) FOR [designation_status]
GO
ALTER TABLE [dbo].[l_designation] ADD  DEFAULT (getdate()) FOR [designation_idate]
GO
ALTER TABLE [dbo].[L_Fyear] ADD  CONSTRAINT [DF_L_Fyear_Fyear_status]  DEFAULT ((1)) FOR [Fyear_status]
GO
ALTER TABLE [dbo].[L_Fyear] ADD  CONSTRAINT [DF_L_Fyear_Fyear_date]  DEFAULT (getdate()) FOR [Fyear_date]
GO
ALTER TABLE [dbo].[L_FyearLog] ADD  CONSTRAINT [DF_L_FyearLog_FyearLog_status]  DEFAULT ((1)) FOR [FyearLog_status]
GO
ALTER TABLE [dbo].[L_FyearLog] ADD  CONSTRAINT [DF_L_FyearLog_FyearLog_date]  DEFAULT (getdate()) FOR [FyearLog_date]
GO
ALTER TABLE [dbo].[L_issueToDept] ADD  DEFAULT (getdate()) FOR [issueToDept_issuedate]
GO
ALTER TABLE [dbo].[L_issueToDeptMast] ADD  DEFAULT (getdate()) FOR [issueToDeptMast_date]
GO
ALTER TABLE [dbo].[L_issueTostaff] ADD  DEFAULT (getdate()) FOR [issueTostaff_issuedate]
GO
ALTER TABLE [dbo].[L_issueTostudent] ADD  DEFAULT (getdate()) FOR [issueTostudent_issuedate]
GO
ALTER TABLE [dbo].[l_itemGroup] ADD  DEFAULT ((1)) FOR [itemGroup_status]
GO
ALTER TABLE [dbo].[l_itemGroup] ADD  DEFAULT (getdate()) FOR [itemGroup_idate]
GO
ALTER TABLE [dbo].[L_notification] ADD  CONSTRAINT [DF_L_notification_notification_status]  DEFAULT ((0)) FOR [notification_status]
GO
ALTER TABLE [dbo].[L_NumsysALog] ADD  CONSTRAINT [DF_L_NumsysALog_NumsysALog_FormatprePost]  DEFAULT ('A for After'' or ''B fro Pre') FOR [NumsysALog_FormatprePost]
GO
ALTER TABLE [dbo].[L_NumsysALog] ADD  CONSTRAINT [DF_L_NumsysALog_NumsysALog_Action]  DEFAULT ('''U'' Update,   ''D'' Delete') FOR [NumsysALog_Action]
GO
ALTER TABLE [dbo].[L_NumSysC] ADD  CONSTRAINT [DF__L_NumSys__NumSy__2CA8951C]  DEFAULT (getdate()) FOR [NumSysC_Date]
GO
ALTER TABLE [dbo].[L_NumSysCLog] ADD  CONSTRAINT [DF__L_NumSys__NumSy__4297D63B]  DEFAULT (getdate()) FOR [NumSysCLog_Date]
GO
ALTER TABLE [dbo].[L_NumSysD] ADD  CONSTRAINT [DF__L_NumSys__NumSy__3A179ED3]  DEFAULT (getdate()) FOR [NumSysD_date]
GO
ALTER TABLE [dbo].[L_NumSysDLog] ADD  CONSTRAINT [DF__L_NumSys__NumSy__3B0BC30C]  DEFAULT (getdate()) FOR [NumSysDLog_date]
GO
ALTER TABLE [dbo].[L_NumSysFLog] ADD  CONSTRAINT [DF_L_NumSysFLog_NumsysFLog_Action]  DEFAULT ('''U'' Update,  ''D'' Delete') FOR [NumsysFLog_Action]
GO
ALTER TABLE [dbo].[L_NumSysMLog] ADD  CONSTRAINT [DF_L_NumSysMLog_NumsysMLog_Action]  DEFAULT ('''U''  Update,   ''D'' Delete') FOR [NumsysMLog_Action]
GO
ALTER TABLE [dbo].[l_publisher] ADD  DEFAULT ((1)) FOR [publisher_status]
GO
ALTER TABLE [dbo].[l_publisher] ADD  DEFAULT (getdate()) FOR [publisher_idate]
GO
ALTER TABLE [dbo].[l_rack] ADD  DEFAULT ((1)) FOR [rack_status]
GO
ALTER TABLE [dbo].[l_rack] ADD  DEFAULT (getdate()) FOR [rack_idate]
GO
ALTER TABLE [dbo].[l_returnChecklist] ADD  DEFAULT ((1)) FOR [returnChecklist_status]
GO
ALTER TABLE [dbo].[l_returnChecklist] ADD  DEFAULT (getdate()) FOR [returnChecklist_idate]
GO
ALTER TABLE [dbo].[l_shelf] ADD  DEFAULT ((1)) FOR [shelf_status]
GO
ALTER TABLE [dbo].[l_shelf] ADD  DEFAULT (getdate()) FOR [shelf_idate]
GO
ALTER TABLE [dbo].[l_staff] ADD  DEFAULT ((1)) FOR [staff_status]
GO
ALTER TABLE [dbo].[l_staff] ADD  DEFAULT (getdate()) FOR [staff_idate]
GO
ALTER TABLE [dbo].[l_student] ADD  DEFAULT ((1)) FOR [student_status]
GO
ALTER TABLE [dbo].[l_student] ADD  DEFAULT (getdate()) FOR [student_idate]
GO
ALTER TABLE [dbo].[l_usr] ADD  CONSTRAINT [DF_L_usr_usr_login]  DEFAULT ((0)) FOR [usr_login]
GO
ALTER TABLE [dbo].[L_UsrAgreement] ADD  CONSTRAINT [DF_L_UsrAgreement_UsrAgreement_idate]  DEFAULT (getdate()) FOR [UsrAgreement_idate]
GO
ALTER TABLE [dbo].[SMS_SMSData] ADD  CONSTRAINT [DF_SMS_SMSData_SMSData_flag]  DEFAULT ('P') FOR [smsdata_flag]
GO
ALTER TABLE [dbo].[sms_smslog] ADD  CONSTRAINT [DF_sms_smslog_SmsLog_Idate]  DEFAULT (getdate()) FOR [SmsLog_Idate]
GO
ALTER TABLE [dbo].[addon_macro]  WITH NOCHECK ADD  CONSTRAINT [FK_addon_macro_addon_macrohead] FOREIGN KEY([macro_macroheadid])
REFERENCES [dbo].[addon_macrohead] ([macrohead_kid])
GO
ALTER TABLE [dbo].[addon_macro] CHECK CONSTRAINT [FK_addon_macro_addon_macrohead]
GO
ALTER TABLE [dbo].[L_Ayear]  WITH NOCHECK ADD  CONSTRAINT [FK_L_Ayear_L_usr] FOREIGN KEY([Ayear_usrid])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_Ayear] CHECK CONSTRAINT [FK_L_Ayear_L_usr]
GO
ALTER TABLE [dbo].[l_bookscrap]  WITH CHECK ADD FOREIGN KEY([bookscrap_iusr])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_Dept]  WITH NOCHECK ADD  CONSTRAINT [FK_L_Dept_L_Dept] FOREIGN KEY([Dept_kid])
REFERENCES [dbo].[L_Dept] ([Dept_kid])
GO
ALTER TABLE [dbo].[L_Dept] CHECK CONSTRAINT [FK_L_Dept_L_Dept]
GO
ALTER TABLE [dbo].[L_issueToDept]  WITH CHECK ADD FOREIGN KEY([issueToDept_deptID])
REFERENCES [dbo].[L_Dept] ([Dept_kid])
GO
ALTER TABLE [dbo].[L_issueToDept]  WITH CHECK ADD FOREIGN KEY([issueToDept_bookstockdetID])
REFERENCES [dbo].[l_bookstockdet] ([bookstockdet_kid])
GO
ALTER TABLE [dbo].[L_issueToDept]  WITH CHECK ADD FOREIGN KEY([issueToDept_iuser])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_issueTostaff]  WITH CHECK ADD FOREIGN KEY([issueTostaff_staffID])
REFERENCES [dbo].[l_staff] ([staff_kid])
GO
ALTER TABLE [dbo].[L_issueTostaff]  WITH CHECK ADD FOREIGN KEY([issueTostaff_bookstockdetID])
REFERENCES [dbo].[l_bookstockdet] ([bookstockdet_kid])
GO
ALTER TABLE [dbo].[L_issueTostaff]  WITH CHECK ADD FOREIGN KEY([issueTostaff_iuser])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_issueTostudent]  WITH CHECK ADD FOREIGN KEY([issueTostudent_studentID])
REFERENCES [dbo].[l_student] ([student_kid])
GO
ALTER TABLE [dbo].[L_issueTostudent]  WITH CHECK ADD FOREIGN KEY([issueTostudent_bookstockdetID])
REFERENCES [dbo].[l_bookstockdet] ([bookstockdet_kid])
GO
ALTER TABLE [dbo].[L_issueTostudent]  WITH CHECK ADD FOREIGN KEY([issueTostudent_iuser])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_MnumLnkRole]  WITH NOCHECK ADD  CONSTRAINT [FK_L_MnumLnkRole_L_usr] FOREIGN KEY([MnumLnkRole_iusrid])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_MnumLnkRole] CHECK CONSTRAINT [FK_L_MnumLnkRole_L_usr]
GO
ALTER TABLE [dbo].[L_notification]  WITH NOCHECK ADD  CONSTRAINT [FK_L_notification_L_usr] FOREIGN KEY([notification_usrId])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[L_notification] CHECK CONSTRAINT [FK_L_notification_L_usr]
GO
ALTER TABLE [dbo].[L_NumSysA]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysA_L_Ayear] FOREIGN KEY([NumsysA_Ayearid])
REFERENCES [dbo].[L_Ayear] ([Ayear_kid])
GO
ALTER TABLE [dbo].[L_NumSysA] CHECK CONSTRAINT [FK_L_NumSysA_L_Ayear]
GO
ALTER TABLE [dbo].[L_NumSysA]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysA_L_NumType] FOREIGN KEY([NumsysA_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysA] CHECK CONSTRAINT [FK_L_NumSysA_L_NumType]
GO
ALTER TABLE [dbo].[L_NumsysALog]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumsysALog_L_Ayear] FOREIGN KEY([NumsysALog_Ayearid])
REFERENCES [dbo].[L_Ayear] ([Ayear_kid])
GO
ALTER TABLE [dbo].[L_NumsysALog] CHECK CONSTRAINT [FK_L_NumsysALog_L_Ayear]
GO
ALTER TABLE [dbo].[L_NumsysALog]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumsysALog_L_NumType] FOREIGN KEY([NumsysALog_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumsysALog] CHECK CONSTRAINT [FK_L_NumsysALog_L_NumType]
GO
ALTER TABLE [dbo].[L_NumSysC]  WITH NOCHECK ADD  CONSTRAINT [FK__L_NumSys__NumSy__2BB470E3] FOREIGN KEY([NumSysC_NumTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysC] CHECK CONSTRAINT [FK__L_NumSys__NumSy__2BB470E3]
GO
ALTER TABLE [dbo].[L_NumSysD]  WITH NOCHECK ADD  CONSTRAINT [FK__L_NumSys__NumSy__370627FE] FOREIGN KEY([NumSysD_NumTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysD] CHECK CONSTRAINT [FK__L_NumSys__NumSy__370627FE]
GO
ALTER TABLE [dbo].[L_NumSysF]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysF_L_Fyear] FOREIGN KEY([NumsysF_Fyearid])
REFERENCES [dbo].[L_Fyear] ([Fyear_kid])
GO
ALTER TABLE [dbo].[L_NumSysF] CHECK CONSTRAINT [FK_L_NumSysF_L_Fyear]
GO
ALTER TABLE [dbo].[L_NumSysF]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysF_L_NumType] FOREIGN KEY([NumsysF_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysF] CHECK CONSTRAINT [FK_L_NumSysF_L_NumType]
GO
ALTER TABLE [dbo].[L_NumSysM]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysM_L_NumType] FOREIGN KEY([NumsysM_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysM] CHECK CONSTRAINT [FK_L_NumSysM_L_NumType]
GO
ALTER TABLE [dbo].[L_NumSysMLog]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysMLog_L_NumType] FOREIGN KEY([NumsysMLog_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysMLog] CHECK CONSTRAINT [FK_L_NumSysMLog_L_NumType]
GO
ALTER TABLE [dbo].[L_NumSysY]  WITH NOCHECK ADD  CONSTRAINT [FK_L_NumSysY_L_NumType] FOREIGN KEY([NumsysY_numTypeId])
REFERENCES [dbo].[L_NumType] ([NumType_kid])
GO
ALTER TABLE [dbo].[L_NumSysY] CHECK CONSTRAINT [FK_L_NumSysY_L_NumType]
GO
ALTER TABLE [dbo].[L_returnToDept]  WITH CHECK ADD FOREIGN KEY([returnToDept_issuetoDeptID])
REFERENCES [dbo].[L_issueToDept] ([issueToDept_kid])
GO
ALTER TABLE [dbo].[L_returnToStaff]  WITH CHECK ADD FOREIGN KEY([returnToStaff_issuetoStaffID])
REFERENCES [dbo].[L_issueTostaff] ([issueTostaff_kid])
GO
ALTER TABLE [dbo].[L_returnToStudent]  WITH CHECK ADD FOREIGN KEY([returnToStudent_issuetoStudentID])
REFERENCES [dbo].[L_issueTostudent] ([issueTostudent_kid])
GO
ALTER TABLE [dbo].[L_Title]  WITH NOCHECK ADD  CONSTRAINT [FK_L_Title_L_Gender] FOREIGN KEY([Title_genderID])
REFERENCES [dbo].[L_Gender] ([Gender_kid])
GO
ALTER TABLE [dbo].[L_Title] CHECK CONSTRAINT [FK_L_Title_L_Gender]
GO
ALTER TABLE [dbo].[l_usr]  WITH NOCHECK ADD  CONSTRAINT [FK_L_usr_L_usr] FOREIGN KEY([usr_uusrID])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[l_usr] CHECK CONSTRAINT [FK_L_usr_L_usr]
GO
ALTER TABLE [dbo].[l_usr]  WITH NOCHECK ADD  CONSTRAINT [FK_L_usr_L_usr1] FOREIGN KEY([usr_iusrid])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[l_usr] CHECK CONSTRAINT [FK_L_usr_L_usr1]
GO
ALTER TABLE [dbo].[L_UsrAgreement]  WITH CHECK ADD  CONSTRAINT [FK_L_UsrAgreement_UserRole] FOREIGN KEY([UsrAgreement_UsrRole])
REFERENCES [dbo].[UserRole] ([UserRoleKid])
GO
ALTER TABLE [dbo].[L_UsrAgreement] CHECK CONSTRAINT [FK_L_UsrAgreement_UserRole]
GO
ALTER TABLE [dbo].[SMS_SMSData]  WITH NOCHECK ADD  CONSTRAINT [FK_SMS_SMSData_SMS_SMSActivity] FOREIGN KEY([SMSData_SMSActivityID])
REFERENCES [dbo].[SMS_SMSActivity] ([SMSActivity_Kid])
GO
ALTER TABLE [dbo].[SMS_SMSData] CHECK CONSTRAINT [FK_SMS_SMSData_SMS_SMSActivity]
GO
ALTER TABLE [dbo].[SMS_SMSSchedule]  WITH NOCHECK ADD  CONSTRAINT [FK_SMS_SMSSchedule_SMS_SMSActivity] FOREIGN KEY([SMSSchedule_SMSActivityID])
REFERENCES [dbo].[SMS_SMSActivity] ([SMSActivity_Kid])
GO
ALTER TABLE [dbo].[SMS_SMSSchedule] CHECK CONSTRAINT [FK_SMS_SMSSchedule_SMS_SMSActivity]
GO
ALTER TABLE [dbo].[UserRole]  WITH NOCHECK ADD  CONSTRAINT [FK_UserRole_L_Usr] FOREIGN KEY([UserRoleIuserId])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[UserRole] CHECK CONSTRAINT [FK_UserRole_L_Usr]
GO
ALTER TABLE [dbo].[UserRole]  WITH NOCHECK ADD  CONSTRAINT [FK_UserRole_L_Usr1] FOREIGN KEY([UserRoleUuserId])
REFERENCES [dbo].[l_usr] ([usr_kid])
GO
ALTER TABLE [dbo].[UserRole] CHECK CONSTRAINT [FK_UserRole_L_Usr1]
GO
/****** Object:  StoredProcedure [dbo].[E_EmailFormatCreationGetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[E_EmailFormatCreationGetSave]
@flag char(1)='L',
@EmailActivityID int=null,
@EmailSchedule_Type char(1)=null,
@EmailSchedule_DaysBefore int = 0,
@EmailSchedule_StartTime nvarchar(10)=null,
@EmailSchedule_TimeBefore int = 0,
@EmailSchedule_TimeSpan int = 0,
@EmailSchedule_Msg nvarchar(max)=null,
@EmailSchedule_Subject nvarchar(100)=null,
@EmailRecipientID int = null,
@EmailSchedule_ExpiryTime int = 0,
@EmailSchedule_AttechFlag char(1) = null
as
begin
	BEGIN TRY         
	BEGIN TRAN     
	if @flag = 'L'
	begin
		select EmailActivity_Kid,EmailActivity_Name from E_EmailActivity order by EmailActivity_Name
		select EmailRecipient_kid,EmailRecipient_Name from E_EmailRecipient where EmailRecipient_status=1 order by EmailRecipient_Name
	end
	else if @flag = 'C'
	begin
		SELECT EmailActivity_AddonProcedure,EmailActivity_Kid EmailFromat_EmailActivityID, EmailFromat_Type, EmailFromat_DaysBefore, 
		EmailFromat_StartTime, EmailFromat_TimeBefore, EmailFromat_TimeSpan,EmailFromat_Subject,EmailFromat_Msg,
		EmailFromat_ExpiryTime,EmailFromat_EmailAttechmentFlag FROM E_EmailActivity LEFT JOIN E_EmailFromat ON EmailActivity_Kid = EmailFromat_EmailActivityID
		and EmailFromat_EmailRecipientID=@EmailRecipientID
		WHERE EmailActivity_Kid = @EmailActivityID
	end
	else if @flag = 'S'
	begin
		declare  @count int = 0
		select @count = (select count(EmailActivity_Kid) from E_EmailFromat,E_EmailActivity 
		where EmailActivity_Kid = EmailFromat_EmailActivityID and  EmailFromat_EmailActivityID = @EmailActivityID and EmailFromat_EmailRecipientID=@EmailRecipientID)
		if @count = 0
		begin
			insert into E_EmailFromat(EmailFromat_EmailActivityID,EmailFromat_EmailRecipientID,EmailFromat_Type, EmailFromat_DaysBefore, EmailFromat_StartTime, EmailFromat_TimeBefore, EmailFromat_TimeSpan, EmailFromat_Msg,EmailFromat_Subject,EmailFromat_ExpiryTime,EmailFromat_EmailAttechmentFlag)
			values (@EmailActivityID,@EmailRecipientID,@EmailSchedule_Type,@EmailSchedule_DaysBefore,@EmailSchedule_StartTime,@EmailSchedule_TimeBefore,@EmailSchedule_TimeSpan,@EmailSchedule_Msg,@EmailSchedule_Subject,@EmailSchedule_ExpiryTime,@EmailSchedule_AttechFlag)
		end
		else
		begin
			update E_EmailFromat set EmailFromat_Type=@EmailSchedule_Type, EmailFromat_DaysBefore=@EmailSchedule_DaysBefore, EmailFromat_StartTime=@EmailSchedule_StartTime, EmailFromat_TimeBefore=@EmailSchedule_TimeBefore,EmailFromat_Subject=@EmailSchedule_Subject, EmailFromat_TimeSpan=@EmailSchedule_TimeSpan, EmailFromat_Msg=@EmailSchedule_Msg, EmailFromat_ExpiryTime = @EmailSchedule_ExpiryTime,EmailFromat_EmailAttechmentFlag=@EmailSchedule_AttechFlag
			where EmailFromat_EmailActivityID = @EmailActivityID and EmailFromat_EmailRecipientID=@EmailRecipientID
		end			
	end
IF @@ERROR = 0 begin      
COMMIT TRAN       
   select 1
END         
END TRY        
BEGIN CATCH        
    ROLLBACK TRAN        
    SELECT         
    '0' ,
    ERROR_NUMBER() AS ErrorNumber,        
    ERROR_SEVERITY() AS ErrorSeverity,        
    ERROR_STATE() as ErrorState,        
    ERROR_PROCEDURE() as ErrorProcedure,        
    ERROR_LINE() as ErrorLine,        
    replace(ERROR_MESSAGE(),'''','') as ErrorMessage      
    
	/*Erorr Handling*/		    
	declare @ErrorNumber int=null
	declare @ErrorSeverity int=null
	declare @ErrorState int=null
	declare @ErrorProcedure nvarchar(max)=null
	declare @ErrorLine int=null
	declare @ErrorMessage nvarchar(max)=null
	SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
	exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=ErrorMessage
	/*Erorr Handling*/		
END CATCH
	
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[ErrorLogInsert]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
CREATE Procedure [dbo].[ErrorLogInsert]
 @ERROR_NUMBER int=null,
 @ERROR_SEVERITY int=null,
 @ERROR_STATE int=null,
 @ERROR_PROCEDURE nvarchar(max)=null,
 @ERROR_LINE  int=null,
 @ERROR_MESSAGE nvarchar(max)=null,
 @userid int=0,
 @ManulDiscription nvarchar(max)=null
 as
 begin
 
Set Nocount on
	INSERT INTO ErrorLog(ERROR_NUMBER, ERROR_SEVERITY,  ProcedureName, ERROR_MESSAGE, Error_Manualdesc )
	VALUES (@ERROR_NUMBER, @ERROR_SEVERITY,  @ERROR_PROCEDURE,  @ERROR_MESSAGE, @ManulDiscription)
	
	select '-1' as VAL,  @ERROR_NUMBER as ERROR_NUMBER, @ERROR_SEVERITY as ERROR_SEVERITY, @ERROR_STATE as ErrorState, @ERROR_PROCEDURE as  ProcedureName, @ERROR_LINE as ERRORLINE  , @ERROR_MESSAGE as ERROR_MESSAGE, @ManulDiscription as error_manualdesc, @userid as error_userid
 end
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_Admin_Get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
CREATE  proc [dbo].[l_Admin_Get]	--3
@usrId int = null
as
begin
	select UserRoleKid, UserRoleName from UserRole --where UserRoleKid in (select distinct DashCount_ProfileId from  M_dashCount)
	--select DashCount_kId, DashCount_Name, DashCount_Procedure,DashCount_Color,  DashCount_iCon  , DashCount_ProfileId
	--from M_DashCountAccess, M_dashCount 
	--where DashCountAccess_usrId = @usrid  and DashCount_kId = DashCountAccess_DashCountId  and DashCountAccess_Status=1  order by DashCountAccess_DashCountId
 
 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Agreement_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE   proc [dbo].[L_Agreement_get] -- @type = 'Doctor'
@id int=null, 
@type  nvarchar(100) = null
as
begin
	if(@id is not null)
	begin
		select UsrAgreement_Kid,UsrAgreement_Type,UsrAgreement_Text, UsrAgreement_UsrRole from l_usrAgreement WHERE UsrAgreement_Kid = @id
	end
	else if (@type is not null)
	begin
		Declare @role int = (select UserRoleKid from UserRole  where UserRoleName=@type )
		Declare @tnc nvarchar(max)=null,  @privacy nvarchar(max)=null,  @agreement nvarchar(max)=null 
		select @tnc=UsrAgreement_Text from L_usrAgreement where UsrAgreement_UsrRole= @role and UsrAgreement_Type='T'
		select @privacy=UsrAgreement_Text from L_usrAgreement where UsrAgreement_UsrRole= @role and UsrAgreement_Type='P'
		select @agreement=UsrAgreement_Text from L_usrAgreement where UsrAgreement_UsrRole= @role and UsrAgreement_Type='A'
		
		select @tnc as terms, @privacy as privacy, @agreement as agreement
 
	end 
	else
	begin
		select row_number() over(order by (select 1)) as row,  UsrAgreement_Kid,case when  UsrAgreement_Type= 'P' then 'Privacy Policy'  when  UsrAgreement_Type= 'A' then 'End User Agreement'  when  UsrAgreement_Type= 'T' then 'Terms & Conditions' end as UsrAgreement_Type , UserRoleName from L_usrAgreement , UserRole where  UserRoleKid = UsrAgreement_UsrRole order by  UsrAgreement_Type asc
	end
end
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Agreement_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE    proc [dbo].[L_Agreement_save]
@id      INT=null,
@usertype    int=null,
@agreementType char(1)= null,
@Text nvarchar(max)= null,
@user int = null,
@flag char(1)= null
as
begin
	begin try 
	begin tran 
		Declare @ret int = 0
		if(@flag='S')
		begin
			update L_usr set usr_login=1 where usr_kid=@user
			set @ret= 2
		end
		else
		begin
				 update L_UsrAgreement set UsrAgreement_Text= @Text , UsrAgreement_idate= getdate() where UsrAgreement_Type=@agreementType and  UsrAgreement_UsrRole= @usertype
				 update L_usr set usr_login=0 where   usr_UserRoleID=@usertype
		set @ret= 1
		end
 
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_AllBooks_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_AllBooks_get] 
as
begin 
	select ROW_NUMBER() over (order by book_title ) row, bookstockdet_bookrefID,  book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   book_status,   book_kid ,ISNULL(stat,'N')stat	 
	
	from  l_book, l_bookstockdet left join   (select issueTostaff_bookstockdetID detID,  'I' stat from L_issueTostaff where issueTostaff_status='I'
		union 
	select issueToDept_bookstockdetID detID, 'I' stat from L_issueToDept where issueToDept_status='I'
	union 
	select issueTostudent_bookstockdetID detID, 'I' stat from L_issueTostudent where issueTostudent_status='I'
	
	union 
	select bookscrap_bookstockdet detID, 'S' stat from l_bookscrap
	)t  on  bookstockdet_kid  = detID    where book_kid= bookstockdet_bookid  

	order by book_title 
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_AllBooksOnly_Search]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
 
 
 
 
 
 
 
CREATE      proc [dbo].[L_AllBooksOnly_Search] 
as
begin 
	select ROW_NUMBER() over (order by book_title ) row,   book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   book_status,   book_kid  
	
	from  l_book     where book_status= 1
 
	order by book_title 
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_appsettings_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_appsettings_get]
as
begin
	select par_kid, par_maxstudentdays, par_maxstaffdays, par_maxdeptdays, par_maxbooktostudent, par_maxbooktodepartment, par_maxbooktostaff, par_collegeName, par_contact, par_email, par_address   from l_par 
end 
GO
/****** Object:  StoredProcedure [dbo].[L_appsettings_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
CREATE    proc [dbo].[L_appsettings_save]
	@deptDays int = null,
	@stuDays int = null,
	@staffDays int = null ,
	@deptNo int= null ,
	@studentNo int = null,
	@staffNo int = null,
	@usrID int = null  
as
begin
	begin try 
	begin tran 
	declare  @ret int =1
		update l_par set    par_maxstudentdays=@stuDays, par_maxstaffdays=@staffDays, par_maxdeptdays=@deptDays, par_maxbooktostudent=@studentNo, par_maxbooktodepartment=@deptNo, par_maxbooktostaff=@staffNo , par_date=GETDATE(), par_user=@usrID
		 
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val  
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Ayear_insert]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
-- =============================================
-- Author:		<Author,,sunil jain>
-- Create date: <Create Date,27/06/2021,>
-- Description:	<Description,acedimic year row insert,>
-- =============================================
CREATE PROCEDURE [dbo].[L_Ayear_insert]
	-- Add the parameters for the stored procedure here	
 	@usrID int=null, -- user id
	@dt date = null,  -- current date		
	@Aid int output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		begin try        
       begin tran 
		
		declare @oldid int=0
		select top 1 @oldid=Ayear_kid from L_Ayear 
		order by Ayear_kid desc
		declare @fdate nvarchar(10)=null
		declare @tdate nvarchar(10)=null
 
		if isnull(@oldid,0)=0 begin		        
				set @fdate='01/01/' + convert(nvarchar(4),(YEAR(@dt)))
				set @tdate='31/12/' + + convert(nvarchar(4),(YEAR(@dt)))			
    	end
		else begin
			select @fdate=convert(nvarchar(10),ayear_From,105),@tdate=convert(nvarchar(10),ayear_To,105) from L_ayear where ayear_kid=@oldid
			set @fdate=CONVERT(nvarchar(10), DATEADD(year,1,convert(date,@fdate,105)),105)
			set @tdate=CONVERT(nvarchar(10), DATEADD(year,1,convert(date,@tdate,105)),105)
		end
		insert into L_ayear(ayear_From,ayear_To,ayear_status,ayear_date,Ayear_usrid)
		values (convert(date,@fdate,105),convert(date,@tdate,105),1,GETDATE(),@usrID)
	
		set @aid=SCOPE_IDENTITY()
 
 
if @@ERROR=0 
begin        
	commit tran        	
end           
         
end try        
begin catch
	ROLLBACK TRAN        
	declare @ErrorNumber int=null,  @ErrorSeverity int=null,  @ErrorState int=null,  @ErrorProcedure nvarchar(max)=null,  @ErrorLine int=null,  @ErrorMessage nvarchar(max)=null;
 
	SELECT @ErrorNumber=ERROR_NUMBER(),  @ErrorSeverity=ERROR_SEVERITY(),  @ErrorState=ERROR_STATE(),  @ErrorProcedure=ERROR_PROCEDURE(),  @ErrorLine=ERROR_LINE(),  @ErrorMessage=ERROR_MESSAGE();           
 
	exec [ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,    @ERROR_SEVERITY=@ErrorSeverity,  @ERROR_STATE=@ErrorState,  @ERROR_PROCEDURE=@ErrorProcedure,  @ERROR_LINE=@ErrorLine,  @ERROR_MESSAGE=@ErrorMessage,  @usrID=@usrID, @ManulDiscription=null ;
end catch         	
end
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_batch_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_batch_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  batch_kid,   batch_name,   batch_status     from  l_batch  where batch_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by batch_name ) row,     batch_kid,  batch_name,   batch_status    from  l_batch  order by batch_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_batch_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_batch_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@batch nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_batch  where batch_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_batch set batch_status = @status, batch_udate= GETDATE(),batch_uusrid = @usrID where batch_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_batch where   batch_name = @batch    and batch_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_batch  set  batch_name=@batch,   batch_udate=GETDATE(),  batch_uusrid=@usrID   where batch_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_batch  ( batch_name, batch_status ,batch_idate,  batch_iusrid)
					values (@batch,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Book_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_Book_get]
@id int=null  ,
@flag CHAR(1)= NULL 
as
begin 
	
IF(@flag='L')	
BEGIN
	select ROW_NUMBER() over (order by  bookstockdet_kid)row,bookstockdet_kid,  bookstockdet_bookrefID, bookstockdet_edition,convert(nvarchar(10),bookstock_date,105) bookstock_date,CONVERT(nvarchar(10),bookstockdet_purDate, 105) bookstockdet_purDate, bookstockdet_price from l_bookstockdet, l_bookstock where bookstockdet_bookstockID=bookstock_kid and bookstockdet_bookid = @id	 order by bookstockdet_kid
END
ELSE  
BEGIN
	if(@id is not null)
	begin
		select    book_title,   book_subtitle, book_isbn10,   book_isbn13,
		( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors,
		( SELECT   STRING_AGG (CONVERT(NVARCHAR(max),lnkbookAuthor_AuthorID), CHAR(13))     FROM  l_lnkbookAuthor where     lnkbookAuthor_bookID=book_kid ) book_authorsID,(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
		book_publisher book_publisherID, CONVERT(nvarchar(10), book_publishedDate, 23)  book_publishedDate, 
		( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,
		( SELECT STRING_AGG (CONVERT(NVARCHAR(max),lnkbookCategory_categoryID), CHAR(13))    FROM   l_lnkbookCategory where    lnkbookCategory_bookID=book_kid ) book_categoryID,book_Description,book_status,   book_kid, (select top 1 File_Path from L_File where  File_Type='0' and File_id=book_kid) as File_Path  from  l_book  where book_kid= @id 
	end
	else
	begin
			
		select ROW_NUMBER() over (order by book_title ) row,   book_title,   book_subtitle, book_isbn10,   book_isbn13,
		( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
		book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
		( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   book_status,   book_kid from  l_book order by book_title 
 
	end
END 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Book_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_Book_save]
@id           INT=null,
@ISBN10        NVARCHAR(10)=null,
@ISBN13        NVARCHAR(13)=null,
@flag char(1)= null, 
@status bit = 1,
@usrID int = null,
@title nvarchar(100)  = null,
@subtitle nvarchar(100)  = null,
@publisher nvarchar(100)= null, 
@publishedDate   nvarchar(10)= null ,
@description nvarchar(max) = null ,
@author nvarchar(max)= null ,
@category nvarchar(max) = null, 
@edition nvarchar(100) = null,
@purdate date = null, 
@qty int=0, 
@price decimal(18,2) =0
as
begin
 declare  @ret int =null,@authorID nvarchar(max) =  '' ,@publisherID int = null, @categoryID nvarchar(max) =  '',   @bbid int=0
 
	begin try 
	begin tran 
	
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from l_lnkbookAuthor where lnkbookAuthor_bookID= @id
				delete from l_lnkbookCategory where lnkbookCategory_bookID = @id
				delete from  L_Book where Book_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update L_Book set Book_status = @status, Book_udate= GETDATE(),book_uuser = @usrID where Book_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0 
			Declare @authorTable as table (id int identity(1, 1),authname nvarchar(100) null )
			Declare @categoryTable as table (id int identity(1, 1),catName nvarchar(100) null )
			INSERT INTO  @authorTable(authname)
			SELECT ITEM FROM fnSplit(@author, ',')
 
			INSERT INTO  @categoryTable(catName )
			SELECT ITEM FROM fnSplit(@category, ',')
 
				---------------Insert Author Master------------------
			Declare @cnt int =(select COUNT(id) from @authorTable)
			Declare @i int =1 
			while (@cnt>=@i)
			begin
				if((select COUNT(*) from l_author where trim(author_name)=TRIM((select authname from @authorTable where  id=@i)))=0)
				begin
					insert  into  l_author (author_name, author_iuser)
					select trim(authname) , @usrID from @authorTable where  id=@i 
					set @authorID= @authorID+', '+CONVERT(nvarchar(10), SCOPE_IDENTITY())
				end
				begin
					set @authorID= @authorID+', '+	CONVERT(nvarchar(10),(select author_kid from l_author where trim(author_name)=TRIM((select authname from @authorTable where  id=@i ))))
				end
			 
				set @i=@i+1;
			end 
			---------------Insert Category Master------------------
		
			set  @cnt =(select COUNT(id) from @categoryTable)
			set  @i   =1
			while (@cnt>=@i)
			begin
				if((select COUNT(*) from l_category where trim(category_title)=TRIM((select catName from @categoryTable where  id=@i )))=0)
				begin
				---	select catName from @categoryTable 
					insert  into  l_category (category_title, category_iuser)
					select trim(catName) , @usrID from @categoryTable where  id=@i 
					set @categoryID= @categoryID+', '+CONVERT(nvarchar(10), SCOPE_IDENTITY())
				end
				else
				begin
				 set @categoryID= @categoryID+', '+	CONVERT(nvarchar(10),(select category_kid from l_category where trim(category_title)=TRIM((select catName from @categoryTable where  id=@i ))))
				end
				 
				set @i=@i+1;
			end 
 
			---------------Insert Publisher Master------------------
			if((select COUNT(*) from l_publisher where trim(publisher_name)=TRIM(@publisher))=0)
				begin
					insert  into  l_publisher (publisher_name, publisher_iuser)
					select trim(@publisher) , @usrID  
					set @publisherID= SCOPE_IDENTITY() 
			end
			begin
				 set @publisherID=  	CONVERT(nvarchar(10),(select publisher_kid from l_publisher where trim(publisher_name)=TRIM(@publisher) ))
			end
 
			select @duplicate=COUNT(*) from L_Book where ( book_isbn10 = @ISBN10  or book_isbn13 = @ISBN13  ) and Book_Kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					delete from l_lnkbookAuthor where lnkbookAuthor_bookID= @id
					delete from l_lnkbookCategory where lnkbookCategory_bookID = @id
					
					update l_book set   book_title=@title, book_subtitle= @subtitle, book_publisher= @publisherID, book_publishedDate= @publishedDate, book_Description =@description, book_status=@status,   book_udate=GETDATE(), book_uuser=@usrID, book_isbn10=@ISBN10, book_isbn13 =@ISBN13 where book_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_book (book_title, book_subtitle, book_publisher, book_publishedDate, book_Description, book_status, book_idate, book_iuser, book_isbn10, book_isbn13)
					values (@title, @subtitle, @publisherID, @publishedDate, @description, @status, GETDATE(), @usrID, @ISBN10, @ISBN13)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					insert into l_lnkbookAuthor(lnkbookAuthor_bookID,lnkbookAuthor_AuthorID )
					SELECT distinct @id, ITEM FROM fnSplit(@authorID, ',')
				
					insert into l_lnkbookCategory(lnkbookCategory_bookID,lnkbookCategory_categoryID )
					SELECT distinct @id, ITEM FROM fnSplit(@categoryID, ',')
 			
			 if(@qty>0)
			 begin 
				if(@purdate is null )
					set @purdate = CONVERT(nvarchar(10), GETDATE(), 105)
				
				if(@price is null )
					set @price = 0
 
 				insert  into l_bookstock(bookstock_date, bookstock_userID)
				values(GETDATE(), @usrID)
				 set  @bbid   = SCOPE_IDENTITY();
					while(@qty>0)
					begin
						DECLARE @preO NVARCHAR(50) =  NULL , @postO NVARCHAR(50) =  NULL ,@noO NVARCHAR(50) =  NULL , @cdate date = getdate() 
						EXEC l_Numsystem_Setget @numtype='BOOK',@userId=@usrID,  @cdate=@cdate,@preO=@preO output, @postO= @postO output, @noO=@noO output
						insert into l_bookstockdet(bookstockdet_bookrefID, bookstockdet_bookid, bookstockdet_edition, bookstockdet_purDate,  bookstockdet_price  ,bookstockdet_bookstockID )
						select  isnull(@preO, '')+@noO+isnull(@postO, ''), @id, @edition, @purdate,  @price, @bbid 
						set @qty= @qty-1
					end  
				 end 
			end
			--else
			--	set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id id , @bbid as stockid
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_bookBarcode_Print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
create proc [dbo].[l_bookBarcode_Print]  ---  28
@id int = null
as
begin
	select bookstock_date,bookstockdet_bookrefID,book_title , publisher_name, bookstockdet_bookrefID  barcode_bookID ,'/barcode/'+CONVERT(nvarchar(10), GETDATE(), 105)+'/'+ bookstockdet_bookrefID +'.png' bar_bookID  from  l_bookstock,l_bookstockdet, l_book, l_publisher where book_kid=bookstockdet_bookid and  bookstockdet_bookstockID= bookstock_kid and publisher_kid=book_publisher and  bookstockdet_kid= @id
end 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_BookDetails_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_BookDetails_get] 
as 
begin
	select ROW_NUMBER() over (order by book_title ) row, 
		bookstockdet_bookrefID,  
		book_title,   
		book_subtitle, 
		book_isbn13,
		(SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
		(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
		--CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate,
		(SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,  
		book_kid ,bookstockdet_edition,
		ISNULL(stat,'AV')stat,
		shelf_name, rack_name
	from  l_book, l_bookstockdet 
		left join   (select issueTostaff_bookstockdetID detID,  'IF' stat from L_issueTostaff where issueTostaff_status='I'
								union 
					select issueToDept_bookstockdetID detID, 'ID' stat from L_issueToDept where issueToDept_status='I'
							union 
					select issueTostudent_bookstockdetID detID, 'IS' stat from L_issueTostudent where issueTostudent_status='I'
							union 
					select bookscrap_bookstockdet detID, 'SC' stat from l_bookscrap
				)t  on  bookstockdet_kid  = detID  
		left join L_lnkbookshelf on  lnkbookshelf_bookID=bookstockdet_kid
		left join l_shelf on shelf_kid = lnkbookshelf_shelfId
		left join l_rack on rack_kid= shelf_rack
	where book_kid= bookstockdet_bookid   and book_status=1 
	order by book_title 

end 
GO
/****** Object:  StoredProcedure [dbo].[L_bookscrap_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
create   proc [dbo].[L_bookscrap_get]
@bookid nvarchar(50)= null 
as
begin
	 if(@bookid is not null)
	begin
		select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13  from view_l_stockdet  where  bookstockdet_bookrefID=@bookid  
	end 
	else 
	begin
		select  ROW_NUMBER() over(order by bookscrap_idate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), bookscrap_idate, 100)bookscrap_idate, usr_name,  bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,  bookstockdet_bookrefID, bookscrap_remarks
		from    L_book, l_bookstockdet, l_usr, L_bookscrap
		where 
			usr_kid =bookscrap_iusr
			and bookscrap_bookstockdet=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
		order by bookscrap_idate desc
	end 
		
 
end 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_bookscrap_print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_bookscrap_print]   -- 1
@id int = null 
as
begin 

		select   bookstockdet_bookrefID , book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,convert(nvarchar(10),bookscrap_idate , 105) scrapdate, usr_name, usr_code  from  l_bookscrap, l_book, l_bookstockdet, l_usr where  
		  bookscrap_bookstockdet = bookstockdet_kid
		and bookstockdet_bookid  = book_kid 
		and usr_kid =  bookscrap_iusr 
		and bookscrap_kid=@id 
end
 
GO
/****** Object:  StoredProcedure [dbo].[L_bookscrap_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
create   proc [dbo].[L_bookscrap_save]
@stockID int = null,
@usrID int = null,
@remarks nvarchar(500)= null 
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxdeptdays from  l_par where par_kid =1 
 
		insert into L_bookscrap( bookscrap_bookstockdet, bookscrap_idate, bookscrap_iusr,   bookscrap_remarks)
		values( @stockID, GETDATE(), @usrID, @remarks   )
 
		set @id = SCOPE_IDENTITY();
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_BookStock_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[L_BookStock_get]
@isbn nvarchar(13)= null
as 
begin
	select book_kid, book_title, book_subtitle,  book_isbn13 from l_book where book_isbn13=@isbn 
end 
GO
/****** Object:  StoredProcedure [dbo].[L_bookStock_Print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

 
 
 
 
create proc [dbo].[L_bookStock_Print]-- 28
@id int = null
as
begin
	select bookstock_date,bookstockdet_bookrefID,book_title , publisher_name, bookstockdet_bookrefID  barcode_bookID ,'/barcode/'+CONVERT(nvarchar(10), GETDATE(), 105)+'/'+ bookstockdet_bookrefID +'.png' bar_bookID  from  l_bookstock,l_bookstockdet, l_book, l_publisher where book_kid=bookstockdet_bookid and  bookstockdet_bookstockID= bookstock_kid and publisher_kid=book_publisher and  bookstock_kid= @id
end 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_BookStock_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_BookStock_save]
@usrID int = null,
@bookDetails nvarchar(max)=null
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
 
	DECLARE @tempTable TABLE  ( 
	row  int identity(1, 1),
		 book_ID int,
		 book_edition nvarchar(100),
		 book_purdate date,
		 book_qty int,
		 book_price decimal(18,2)
        ) ;
		DECLARE @XML AS XML  
		SET @XML = @bookDetails  
		INSERT INTO @tempTable(  
				book_ID
				,book_edition
				,book_purdate
				,book_qty
				,book_price
			 )   
   
   SELECT   
		 B.Book.query('./book_ID').value('.','int')book_ID    
		,B.Book.query('./book_edition').value('.','nvarchar(100)')book_edition   
		,B.Book.query('./book_purdate').value('.','date')book_purdate   
		,B.Book.query('./book_qty').value('.','int')book_qty   
		,B.Book.query('./book_price').value('.','decimal(18,2)')book_price   
    FROM  
    @XML.nodes ('/bookdet/book') as B(Book) 
	-- select * from @tempTable
	Declare @bkcnt int =(select COUNT(*) from @tempTable)
	Declare @bki int =1
	Declare  @id int = null
	insert  into l_bookstock(bookstock_date, bookstock_userID)
	values(GETDATE(), @usrID)
	set @id = SCOPE_IDENTITY();
	while(@bkcnt>=@bki)
	begin
		Declare @bookID int=null, @edition nvarchar(50), @purdate date, @qty int, @price decimal(18,2) 
                
		select  @bookID=book_ID,  @edition=book_edition, @purdate=book_purdate, @qty =book_qty,@price = book_price    from @tempTable  where row=@bki 
 
		while(@qty>0)
		begin
			DECLARE @preO NVARCHAR(50) =  NULL , @postO NVARCHAR(50) =  NULL ,@noO NVARCHAR(50) =  NULL , @cdate date = getdate() 
			EXEC l_Numsystem_Setget @numtype='BOOK',@userId=@usrID,  @cdate=@cdate,@preO=@preO output, @postO= @postO output, @noO=@noO output
			insert into l_bookstockdet(bookstockdet_bookrefID, bookstockdet_bookid, bookstockdet_edition, bookstockdet_purDate,  bookstockdet_price  ,bookstockdet_bookstockID )
			select  isnull(@preO, '')+@noO+isnull(@postO, ''), @bookID, @edition, @purdate,  @price, @id 
			set @qty= @qty-1
		end 
		set @bki =@bki+1
	end
 
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val , @id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_booktransitionreport_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
create   proc [dbo].[L_booktransitionreport_get]-- @id=0
@bookid nvarchar(50) = null, 
@id int = null
as
begin
	if(@bookid is not null)
	begin
		select     book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , bookstockdet_kid
		from  L_book, l_bookstockdet
		where  book_kid= bookstockdet_bookid 
		and bookstockdet_bookrefID= @bookid
		 
	end
	else if (@id is not null   and  @id<>0 )
	begin
		select ROW_NUMBER() over (order by (select null) ) row, CONVERT(nvarchar(50), adate, 100) date,actiontype, issuedusertype,issueduser , issuedby  from (
			select issueToDept_issuedate adate,  'Issue' actiontype, 'Department' issuedusertype, Dept_name issueduser, usr_name issuedby from L_issueToDept, L_Dept, l_usr where usr_kid=issueToDept_iuser and   Dept_kid= issueToDept_deptID and  issueToDept_bookstockdetID = @id
			
			union all 
 
			select issueTostaff_issuedate adate,  'Issue' actiontype, 'Staff' issuedusertype, staff_name issueduser, usr_name issuedby from L_issueTostaff, l_staff, l_usr where usr_kid=issueTostaff_iuser and   staff_kid= issueTostaff_staffID and  issueTostaff_bookstockdetID = @id 
 
			union all 
 
			select issueTostudent_issuedate adate,  'Issue' actiontype, 'Student' issuedusertype, student_name issueduser, usr_name issuedby from L_issueTostudent, l_student, l_usr where usr_kid=issueTostudent_iuser and   student_kid= issueTostudent_studentID  and  issueTostudent_bookstockdetID = @id 
 
			union all
 
			select returnToDept_returndate adate,  'Return' actiontype, 'Department' issuedusertype, Dept_name issueduser, usr_name issuedby from [dbo].[L_returnToDept],L_issueToDept,  L_Dept, l_usr where returnToDept_issuetoDeptID = issueToDept_kid and  usr_kid=returnToDept_iuser and   Dept_kid= issueToDept_deptID and  issueToDept_bookstockdetID = @id
			
			union all 
 
			select returnToStaff_returndate adate,  'Return' actiontype, 'Staff' issuedusertype, staff_name issueduser, usr_name issuedby from [dbo].[L_returnToStaff],L_issueTostaff,  l_staff, l_usr where usr_kid=returnToStaff_iuser and    returnToStaff_issuetoStaffID = issueTostaff_kid and  staff_kid= returnToStaff_iuser and  issueTostaff_bookstockdetID = @id 
 
			union all 
 
			select returnToStudent_returndate adate,  'Return' actiontype, 'Student' issuedusertype, student_name issueduser, usr_name issuedby from [dbo].[L_returnToStudent],L_issueTostudent,  l_student, l_usr where  returnToStudent_issuetoStudentID= issueTostudent_kid and usr_kid=returnToStudent_iuser and   student_kid= issueTostudent_studentID  and  issueTostudent_bookstockdetID = @id 
 
			union all 
 
			
			select bookscrap_idate adate,  'Scrap' actiontype, '' issuedusertype, '' issueduser, usr_name issuedby from [dbo].[l_bookscrap], l_usr where  usr_kid=bookscrap_iusr and      bookscrap_bookstockdet = @id 
		)t order by adate desc
		 
	end 
end
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_branch_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_branch_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  branch_kid,   branch_name,   branch_status     from  l_branch  where branch_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by branch_name ) row,     branch_kid,  branch_name,   branch_status    from  l_branch  order by branch_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_branch_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_branch_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@branch nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_branch  where branch_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_branch set branch_status = @status, branch_udate= GETDATE(),branch_uusrid = @usrID where branch_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_branch where   branch_name = @branch    and branch_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_branch  set  branch_name=@branch,   branch_udate=GETDATE(),  branch_uusrid=@usrID   where branch_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_branch  ( branch_name, branch_status ,branch_idate,  branch_iusrid)
					values (@branch,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_course_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_course_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  course_kid,   course_name,   course_status     from  l_course  where course_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by course_name ) row,     course_kid,  course_name,   course_status    from  l_course  order by course_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_course_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_course_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@course nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_course  where course_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_course set course_status = @status, course_udate= GETDATE(),course_uusrid = @usrID where course_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_course where   course_name = @course    and course_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_course  set  course_name=@course,   course_udate=GETDATE(),  course_uusrid=@usrID   where course_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_course  ( course_name, course_status ,course_idate,  course_iusrid)
					values (@course,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_DashboardCount]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
 --                        
CREATE     PROCEDURE [dbo].[L_DashboardCount]  
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
 
	declare @COUNT int =0
 
 Declare @temp as table (i int identity(1,1),DashName nvarchar(100), DashSName nvarchar(100),DCount int, Color nvarchar(50))
 
	 -- 'TOTAL BOOKS', 'ENTERED BOOK'
		       
			--==============================================================================
			Declare @totalBooks int =0
			select @totalBooks = count(bookstockdet_kid) from l_bookstockdet, l_book  where bookstockdet_bookid=book_kid and book_status=1
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'TOTAL BOOKS', 'ENTERED BOOK', @totalBooks   				         		--==
			--==============================================================================
	
  
  
  -- 'TOTAL BOOKS', 'ISSUED'
		       
			--==============================================================================
			Declare @totalissued int =0
			select @totalissued =COUNT(issueToDept_kid) from L_issueToDept where issueToDept_status='I'
			select @totalissued = @totalissued +COUNT(issueTostaff_kid) from L_issueTostaff where issueTostaff_status='I'
			select @totalissued =@totalissued  + COUNT(issueTostudent_kid) from L_issueTostudent where issueTostudent_status='I'
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'TOTAL BOOKS', 'ISSUED', @totalissued   			     	         		--==
			--==============================================================================
		
	-- 'TOTAL BOOKS', 'SCRAPPED / REJECTED' 
			--============================================================================== 
			Declare @totalscrapped int =0
			select @totalscrapped =COUNT(bookscrap_kid) from l_bookscrap  
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'TOTAL BOOKS', 'SCRAPPED / REJECTED', @totalscrapped   			     		--==
			--==============================================================================
		
 
	-- 'TOTAL BOOKS', 'OVERDUE' 
			--============================================================================== 
			select @COUNT =COUNT(issueToDept_kid) from L_issueToDept where issueToDept_status='I' and convert(date,issueToDept_rdate)<CONVERT(date, GETDATE())
			select @COUNT = @COUNT +COUNT(issueTostaff_kid) from L_issueTostaff where issueTostaff_status='I' and convert(date,issueTostaff_rdate)<CONVERT(date, GETDATE())
			select @COUNT =@COUNT  + COUNT(issueTostudent_kid) from L_issueTostudent where issueTostudent_status='I' and convert(date,issueTostudent_rdate)<CONVERT(date, GETDATE())

			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'TOTAL BOOKS', 'OVERDUE', @COUNT   				         	    	--==
			--==============================================================================
			SET @COUNT=0; 

	-- 'TOTAL BOOKS', 'AVAILABLE'
		       
			--==============================================================================
			Declare @totalAvlBooks int =0
			set @totalAvlBooks = @totalBooks-(@totalissued+@totalscrapped)
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'TOTAL BOOKS', 'AVAILABLE', @totalAvlBooks   				         		--==
			--==============================================================================
		
	-- 'IN DEPARTMENTS', 'TOTAL BOOKS'
		       
			--==============================================================================
			select @COUNT =COUNT(issueToDept_kid) from L_issueToDept where issueToDept_status='I'
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'IN DEPARTMENTS', 'TOTAL BOOKS', @COUNT   			         		--==
			--==============================================================================
			SET @COUNT=0; 
 
	-- 'IN DEPARTMENTS', 'OVERDUE'
		       
			--==============================================================================
			select @COUNT =COUNT(issueToDept_kid) from L_issueToDept where issueToDept_status='I' and convert(date,issueToDept_rdate)<CONVERT(date, GETDATE())
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'IN DEPARTMENTS', 'TOTAL BOOKS  OVERDUE', @COUNT   		            --==
			--==============================================================================
			SET @COUNT=0; 
 
	-- 'STAFF', 'TOTAL BOOKS'
		       
			--==============================================================================
			select @COUNT =COUNT(issueTostaff_kid) from L_issueTostaff where issueTostaff_status='I'
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'STAFF', 'TOTAL BOOKS', @COUNT   			    	         		--==
			--==============================================================================
			SET @COUNT=0; 
 
	-- 'STAFF', 'TOTAL BOOKS OVERDUE'
		       
			--==============================================================================
			select @COUNT =  COUNT(issueTostaff_kid) from L_issueTostaff where issueTostaff_status='I' and convert(date,issueTostaff_rdate)<CONVERT(date, GETDATE())
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'STAFF', 'TOTAL BOOKS OVERDUE', @COUNT   			         		--==
			--==============================================================================
			SET @COUNT=0; 
 
	-- 'STUDENT', 'TOTAL BOOKS'
		       
			--============================================================================== 
			select @COUNT = COUNT(issueTostudent_kid) from L_issueTostudent where issueTostudent_status='I'
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select  'STUDENT', 'TOTAL BOOKS', @COUNT   	     			         		--==
			--==============================================================================
			SET @COUNT=0; 
 
	-- 'STUDENT', 'TOTAL BOOKS OVERDUE'
		       
			--==============================================================================
			select @COUNT =  COUNT(issueTostudent_kid) from L_issueTostudent where issueTostudent_status='I' and convert(date,issueTostudent_rdate)<CONVERT(date, GETDATE())
			INSERT INTO @temp (DashName,DashSName,DCount )			                	 --=
			select 'STUDENT', 'TOTAL BOOKS OVERDUE', @COUNT   		 	         		--==
			--==============================================================================
			SET @COUNT=0; 
  
	
 Declare @color nvarchar(max)= '#116D66,#133832,#6C6B6E,#866C69,#846353,#5E2826,#724904,#4A0169,#830743,#0B3766,#5C6023,#8C3A1E,#053110,#3C1A28,#870834,#692808,#01484B,#6C1A16,#1C2956,#0B3A5D,#113226,#70606C,#365636,#826632,#2B0610,#8C5A63,#874240,#0C5425,#2A3055,#5D0224,#8E5A5C,#372E21,#6B6C2E,#711C6E,#00511D,#753821,#19524B,#644C18,#421C33,#712A13,#7A6766,#0D1807,#6D3564,#695402,#2D1414,#03472E,#79151C,#542434,#51302E,#703130,#1C3C08,#2A3110,#734A39,#0A4845,#120513,#835345,#3B1946,#202A6D,#8C1C62,#5B6432,#3E1058,#3B5648,#0D675D,#245441,#2A2810,#190C1D,#104811,#766551,#2B0327,#2A4561,#244839,#580B35,#3C425D,#723A5E,#4A1446,#104D2A,#872B41,#361708,#053C3C,#324167,#04195C,#125E06,#886A00,#086E53,#315206,#3D1C22,#654604,#401E6E,#4C1763,#603664,#70504E,#334E59,#80101B,#754D26,#101436,#670C15,#023D02,#841E34,#102E10,#063E52'
		 
	update @temp set Color=item  from  (select  ROW_NUMBER() over (order by newID() )idd,   item from fnSplit(@color, ',')  )t where idd= i

	SELECT i as ID, DashName,DashSName,DCount,      Color FROM @temp 
END
  
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Department_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
CREATE   proc [dbo].[L_Department_get]
@id int=null  ,
@flag char(1)= null 
as
begin 
	 if(@flag= 'L')
	 begin
		select staff_kid, staff_name from l_staff order by staff_name 
	 end 
	 else
	 begin
		if(@id is not null)
		begin
			select  dept_kid,   dept_name,   dept_status  , dept_incharge   from  l_dept where dept_kid= @id 
		end
		else
		begin
			
			select ROW_NUMBER() over (order by dept_name ) row,     dept_kid,  dept_name ,   dept_status , dept_incharge , staff_name   from  l_dept , l_staff where  dept_incharge =staff_kid  order by dept_name 
 
		end
	end 
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Department_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_Department_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@department nvarchar(50) = null ,
@incharge int = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_dept  where dept_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_dept set dept_status = @status, dept_udate= GETDATE(),Dept_uusrid = @usrID where dept_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_dept where   dept_name = @department    and dept_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_dept  set  dept_name=@department,   dept_udate=GETDATE(),  dept_uusrid=@usrID, dept_incharge=@incharge   where dept_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_dept  ( dept_name, dept_status ,dept_idate,  dept_iusrid, dept_incharge)
					values (@department,  @status,  GETDATE(), @usrID, @incharge)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_departmenthistoryreport_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_departmenthistoryreport_get]
@id int = null
as
begin
	if(@id is  null)
	begin
		 

		select Dept_kid,  Dept_name  from  L_Dept  where  Dept_status=1
		 
	end
	else
	begin
		select ROW_NUMBER() over (order by (select null) ) row, CONVERT(nvarchar(50), adate, 100) date,actiontype,book_title, book_subtitle , book_isbn13 , bookstockdet_edition, book_authors , book_publisher, book_category, bookstockdet_bookrefID, status from (
			 			select issueTodept_issuedate adate,  'Issue' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , issueTodept_status status
		from L_issueTodept, L_book, l_bookstockdet
		where  
			  issueTodept_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTodept_deptID=   @id   

			union all

			
			select returnTodept_returndate adate,  'Return' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , 'R'status
		from L_issueTodept, L_book, l_bookstockdet, [L_returnTodept]
		where  returnTodept_issuetodeptID= issueTodept_kid and 
			  issueTodept_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTodept_deptID=   @id   


			  

			 

			
		 )t order by adate desc
		 
	end 
end

 
GO
/****** Object:  StoredProcedure [dbo].[L_Designation_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_Designation_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  designation_kid,   designation_name,   designation_status     from  l_designation  where designation_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by designation_name ) row,     designation_kid,  designation_name,   designation_status    from  l_designation  order by designation_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_designation_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_designation_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@designation nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_designation  where designation_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_designation set designation_status = @status, designation_udate= GETDATE(),designation_uusrid = @usrID where designation_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_designation where   designation_name = @designation    and designation_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_designation  set  designation_name=@designation,   designation_udate=GETDATE(),  designation_uusrid=@usrID   where designation_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_designation  ( designation_name, designation_status ,designation_idate,  designation_iusrid)
					values (@designation,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_FileSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE  proc [dbo].[l_FileSave] 
@id int=null,
@path nvarchar(max)= null,
@type nchar(5)= null 

as
begin
	begin try 
	begin tran 
			
		if(@path is not null)begin
			delete from l_file where  File_id=@id and File_Type=@type
			Insert into l_file (File_Path,File_id,File_Type)
			values(@path,@id,@type)
		end 
		else 
		begin
			delete from l_file where  File_id=@id and File_Type=@type
		end
 
 
				
		if(@@ERROR = 0)
		begin
			commit tran
			select 1
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Fine_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_Fine_get]
@id char(1)= null 
as 
begin
	if(@id is not null )
	begin
		select 'Fine Applicable to '+ case  finemast_userType when 'D' then 'Department' when 'S' then 'Staff' when 'U' then 'Student'  end fineusr,  finemast_finetype, finemast_Amt from l_finemast  where finemast_kid=@id

		select finemastdet_from, finemastdet_to, finemastdet_amt from l_finemastdet  where finemastdet_finemastID=@id

	end 
	else
	begin
		select   ROW_NUMBER() over(order by finemast_userType  )row, finemast_kid,  case  finemast_userType when 'D' then 'Department' when 'S' then 'Staff' when 'U' then 'Student'  end fineusr, case  finemast_finetype when 'F' then 'Daily Basis' when 'V' then 'Interval' end finemast_finetype, finemast_Amt,
		case (
			case  finemast_finetype when 'F' then isnull(finemast_Amt, 0) when 'V' then (select COUNT(*) from l_finemastdet where finemastdet_finemastID=finemast_kid ) end)
		when 0 then 'Not Applicable' else 'Applicable' end isapplicable  from l_finemast    order by finemast_userType
	end 
end 


 
GO
/****** Object:  StoredProcedure [dbo].[L_Fine_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
CREATE     proc [dbo].[L_Fine_save]
@id           INT=null, 
@usrID int = null, 
@amount decimal(18,2)= null ,
@ftype char(1)=null, 
@data nvarchar(max)= null
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		begin
			update l_finemast set finemast_finetype = @ftype, finemast_udate= GETDATE(),finemast_Amt = @amount, finemast_uusr =@usrID where finemast_kid =@id
			delete from l_finemastdet where finemastdet_finemastID =@id

			if(@data is not null)
			begin
				DECLARE @XMLData AS XML
				set @XMLData=@data
 
				 insert into l_finemastdet(finemastdet_from,finemastdet_to, finemastdet_amt, finemastdet_finemastID )
				SELECT M.Item.query('./from').value('.','int') fromdt,
				case    M.Item.query('./to').value('.','int')  when '' then null else M.Item.query('./to').value('.','int') end  todt,
				M.Item.query('./amount').value('.','decimal(18,2)') amount, @id
				FROM @XMLData.nodes('/root/child') AS M(Item)
			end 
			


			set @ret=1
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_format_GetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
CREATE  proc [dbo].[L_format_GetSave]   --1,null ,1,Null,'ABC','S'           
@flag char(1)='E' , --  'E' for editing , 'S' for saving 
@formatid int =null,
@Format nvarchar(max)=null,     
@FormatDetail_PageType varchar(15) = 'A4',
@FormatDetail_PageOrientation char(1) = 'P',
@FormatDetail_PageLeftMargin int=15,
@FormatDetail_PageRightMargin int=15,
@FormatDetail_HeaderBodyMargin int=0,
@FormatDetail_BodyFooterMargin int=0,
@FormatDetail_FooterPageNoShow char(1)='Y', 
@FormatDetail_FooterPageNoColor nvarchar(50)='DimGray',
@headerid int=null,
@footerid int=null,
@othheaderid int=null,
@lastfooterid int=null
 
as    
 begin
 
  if @flag='E' begin
      
      declare @mnumid int=null
      
      select FormatTemplate_kid,FormatTemplate_ename,FormatTemplate_Parentid,FormatTemplate_Ftype, FormatTemplate_Formatid,
       FormatTemplate_Status,Format_mnumid ,[FormatTemplate_Format],[FormatTemplate_PageType]
      ,[FormatTemplate_PageOrientation]      ,[FormatTemplate_PageLeftMargin]   ,[FormatTemplate_PageRightMargin]  ,[FormatTemplate_HeaderBodyMargin]
      ,[FormatTemplate_BodyFooterMargin],Format_spname,FormatTemplate_FooterPageNoShow,FormatTemplate_FooterPageNoColor
      from L_FormatTemplate,L_Format where FormatTemplate_kid=@formatid 
       and FormatTemplate_Formatid = Format_kid           
     
     select @mnumid=Format_mnumid from L_Format,L_FormatTemplate
           where FormatTemplate_kid=@formatid and Format_kid=FormatTemplate_Formatid
     
     -- Header List
     select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='H'  and FormatTemplate_status=1 
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
     
     -- Footer List
     select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='F'  and FormatTemplate_status=1
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
     
     
     -- First Page Header List
      select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='OH'  and FormatTemplate_status=1
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
      --Last Page Footer List
    
       select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='LF'  and FormatTemplate_status=1 
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
          
     select  [Link_Headerid]
             ,[Link_Footerid]
              ,[Link_otherHeaderid]
              ,[Link_LastPagefooterid]
        from L_Link_HF_FT                                     
            where   [Link_FormatTemplateid]=@formatid    
      
	select PaperType_Kid,PaperType_Name from L_papertype
  end
  
  if @flag='S' begin
     
  begin try 
     begin tran
     
       update L_FormatTemplate set 
               [FormatTemplate_Format]=@Format
               ,[FormatTemplate_PageType]=@FormatDetail_PageType
			  ,[FormatTemplate_PageOrientation]=@FormatDetail_PageOrientation
			  ,[FormatTemplate_PageLeftMargin]=@FormatDetail_PageLeftMargin
			  ,[FormatTemplate_PageRightMargin]=@FormatDetail_PageRightMargin
			  ,[FormatTemplate_HeaderBodyMargin]=@FormatDetail_HeaderBodyMargin
			  ,[FormatTemplate_BodyFooterMargin]=@FormatDetail_BodyFooterMargin
			  ,[FormatTemplate_FooterPageNoShow]=@FormatDetail_FooterPageNoShow 
			  ,[FormatTemplate_FooterPageNoColor]=@FormatDetail_FooterPageNoColor		      	      
       where
             FormatTemplate_kid=@formatid
             
        delete from L_Link_HF_FT where Link_FormatTemplateid=@formatid
        
           if @headerid is not null or @footerid is not null begin
	
               insert into L_Link_HF_FT ([Link_FormatTemplateid],[Link_Headerid],[Link_Footerid],[Link_otherHeaderid],[Link_LastPagefooterid])
               values (@formatid,@headerid,@footerid,@othheaderid,@lastfooterid)             
           end
 
          if @@ERROR=0    begin
    		commit tran
			select 1
	    	end
	 end try
	 begin catch
		rollback tran		   			  
		  select ERROR_NUMBER() AS ErrorNumber,  
		ERROR_SEVERITY() AS ErrorSeverity,  
		ERROR_STATE() as ErrorState,  
		ERROR_PROCEDURE() as ErrorProcedure,  
		ERROR_LINE() as ErrorLine,  
		ERROR_MESSAGE() as ErrorMessage; 
	    declare @ErrorNumber int=null
    declare @ErrorSeverity int=null
    declare @ErrorState int=null
    declare @ErrorProcedure nvarchar(max)=null
    declare @ErrorLine int=null
    declare @ErrorMessage nvarchar(max)=null
     SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
    exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null
 
	 end catch
	 
  end
 
 end
 
 	
		
		
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Fyear_insert]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
-- =============================================
-- Author:		<Author,,sunil jain>
-- Create date: <Create Date,27/06/2021,>
-- Description:	<Description,financial year row insert,>
-- =============================================
CREATE PROCEDURE [dbo].[L_Fyear_insert]
	-- Add the parameters for the stored procedure here	
 	@usrID int=null, -- user id
	@dt date = null,  -- current date		
	@fid int output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		begin try        
       begin tran 
		
		declare @oldid int=0
		select top 1 @oldid=Fyear_kid from L_Fyear 
		order by Fyear_kid desc
		declare @fdate nvarchar(10)=null
		declare @tdate nvarchar(10)=null
 
		if isnull(@oldid,0)=0 begin	
	        if MONTH(@dt)<3 begin
				set @fdate='01/04/' + convert(nvarchar(4),(YEAR(@dt)-1))
				set @tdate='31/03/' + + convert(nvarchar(4),(YEAR(@dt)))
			end
			else begin
				set @fdate='01/04/' + convert(nvarchar(4),(YEAR(@dt)))
				set @tdate='31/03/' + + convert(nvarchar(4),(YEAR(@dt)+1))
			end
				--SELECT @FIYear = (CASE WHEN (MONTH(@cdate)) <= 3 THEN convert(varchar(4), YEAR(@cdate)-1) + '-' + convert(varchar(4), YEAR(@cdate)%100)    
				--				ELSE convert(varchar(4),YEAR(@cdate))+ '-' + convert(varchar(4),(YEAR(@cdate)%100)+1)END)    
    	end
		else begin
			select @fdate=convert(nvarchar(10),Fyear_From,105),@tdate=convert(nvarchar(10),Fyear_To,105) from L_Fyear where Fyear_kid=@oldid
			set @fdate=CONVERT(nvarchar(10), DATEADD(year,1,convert(date,@fdate,105)),105)
			set @tdate=CONVERT(nvarchar(10), DATEADD(year,1,convert(date,@tdate,105)),105)
		end
		insert into L_Fyear(Fyear_From,Fyear_To,Fyear_status,Fyear_date,Fyear_usrid)
		values (convert(date,@fdate,105),convert(date,@tdate,105),1,GETDATE(),@usrID)
	
		set @fid=SCOPE_IDENTITY()
 
 
if @@ERROR=0 
begin        
	commit tran        	
end           
         
end try        
begin catch
	ROLLBACK TRAN        
	declare @ErrorNumber int=null,  @ErrorSeverity int=null,  @ErrorState int=null,  @ErrorProcedure nvarchar(max)=null,  @ErrorLine int=null,  @ErrorMessage nvarchar(max)=null;
 
	SELECT @ErrorNumber=ERROR_NUMBER(),  @ErrorSeverity=ERROR_SEVERITY(),  @ErrorState=ERROR_STATE(),  @ErrorProcedure=ERROR_PROCEDURE(),  @ErrorLine=ERROR_LINE(),  @ErrorMessage=ERROR_MESSAGE();           
 
	exec [ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,    @ERROR_SEVERITY=@ErrorSeverity,  @ERROR_STATE=@ErrorState,  @ERROR_PROCEDURE=@ErrorProcedure,  @ERROR_LINE=@ErrorLine,  @ERROR_MESSAGE=@ErrorMessage,  @sessionID=@usrID, @ManulDiscription=null ;
end catch         	
end
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_getAuthors]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
create    proc [dbo].[l_getAuthors]
@term nvarchar(100) = null 
as
begin
select author_kid value,author_name label from L_author  where  author_status=1 and author_name like '%'+@term+'%'
end
 
GO
/****** Object:  StoredProcedure [dbo].[l_getcategories]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
create    proc [dbo].[l_getcategories]
@term nvarchar(100) = null 
as
begin
select category_kid value,category_title label from L_category  where  category_status=1 and category_title like '%'+@term+'%'
end
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_GetNotification]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
CREATE    proc [dbo].[l_GetNotification] --3
@usrid int = null,
@flag char(1)=null
as
BEGIN
	SET NOCOUNT ON;
	begin try
    begin tran
		if(@flag='U')
		begin
			update l_notification set  notification_status= 1 where notification_usrId= @usrid
		end 
		else
		begin 
			select Top 50  notification_kID, notification_msg  from l_notification where notification_usrId= @usrid
			--and notification_status= 0
			order by notification_kID desc
			select count (*) as count from l_notification where notification_usrId= @usrid and notification_status= 0
		end
 
		if @@ERROR=0 begin
		commit tran
		select 1
	end
		
	END TRY      
	BEGIN CATCH      
		-- Execute the error retrieval routine.    
		ROLLBACK TRAN      
		SELECT       
		ERROR_NUMBER() AS ErrorNumber,      
		ERROR_SEVERITY() AS ErrorSeverity,      
		ERROR_STATE() as ErrorState,      
		ERROR_PROCEDURE() as ErrorProcedure,      
		ERROR_LINE() as ErrorLine,      
		ERROR_MESSAGE() as ErrorMessage;     
				
				    
		/*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
			SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
		/*End*/
 
     
	END CATCH
 
 
 
 
 End
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_getPublisher]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE  proc [dbo].[l_getPublisher]-- 'am'
@term nvarchar(100)
as
begin
select publisher_kid value,publisher_name label from L_publisher where  publisher_status=1 and publisher_name like '%'+@term+'%'
end
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToDept_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
create   proc [dbo].[L_issueToDept_get] --@deptID= 1
@bookid nvarchar(50)= null, 
@flag char(1)= null, 
@deptID int = null
as
begin
	if(@flag='L')
	begin
		select Dept_kid, Dept_name from l_dept where Dept_status=1
		select  par_maxdeptdays , par_maxbooktodepartment from  l_par where par_kid =1 
	end 
	else if(@bookid is not null)
	begin
		select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13  from view_l_stockdet  where  bookstockdet_bookrefID=@bookid  
	end 
	else if (@deptID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueToDept_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueToDept_issuedate, 100)issueToDept_issuedate, usr_name,  bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category, issueToDept_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueToDept_rdate, 100) issueToDept_rdate, case when issueToDept_rdate>GETDATE() then 'N' else 'L' end as Late   
		from L_issueToDept, L_book, l_bookstockdet, l_usr
		where 
			usr_kid =issueToDept_iuser
			and issueToDept_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToDept_deptID= @deptID
		order by issueToDept_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToDept_print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_issueToDept_print]-- 2
@id int = null 
as
begin
		select CONVERT(nvarchar(10),issueToDeptMast_date, 103) IssueDate ,  usr_name, usr_code, Dept_name  from L_issueToDeptMast, L_Dept, l_usr where   Dept_kid = issueToDeptMast_DeptID and usr_kid = issueToDeptMast_USER and issueToDeptMast_kid=@id 

		select   bookstockdet_bookrefID , book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,convert(nvarchar(10),issueToDept_rdate , 105) returndate  from  L_issueToDept, l_book, l_bookstockdet where  
		  issueToDept_bookstockdetID = bookstockdet_kid
		and bookstockdet_bookid  = book_kid 
		and issueToDept_issueToDeptMastId=@id 
end
GO
/****** Object:  StoredProcedure [dbo].[L_issueToDept_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  



 
create   proc [dbo].[L_issueToDept_save]
@deptID int = null,
@stockID NVARCHAR(MAX) = null,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxdeptdays from  l_par where par_kid =1 
 
	 insert into L_issueToDeptMast(issueToDeptMast_date, issueToDeptMast_USER,issueToDeptMast_DeptID) 
	 values (GETDATE(), @usrID, @deptID);

	set @id = SCOPE_IDENTITY();

		insert into L_issueToDept(issueToDept_issueToDeptMastId, issueToDept_deptID, issueToDept_bookstockdetID, issueToDept_issuedate, issueToDept_iuser, issueToDept_status, issueToDept_rdate)
		select @id, @deptID, item, GETDATE(), @usrID, 'I',case @rmaxdate when null then null else   DATEADD(d, @rmaxdate, GETDATE()) end  from fnSplit(@stockID, ',')
 
		
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStaff_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
create   proc [dbo].[L_issueToStaff_get]
@bookid nvarchar(50)= null,  
@StaffID nvarchar(50) = null,
@flag char(1)= null
 
as
begin
	if(@flag= 'L')
	begin
		select staff_kid,staff_name from l_staff where staff_staffID=@StaffID and staff_status=1
		select  par_maxstaffdays,par_maxbooktostaff from  l_par where par_kid =1 
	end 
	else if(@bookid is not null)
	begin
			select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13  from view_l_stockdet  where  bookstockdet_bookrefID=@bookid  
	end 
	else if (@StaffID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueToStaff_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueToStaff_issuedate, 100)issueToStaff_issuedate, usr_name,  bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category, issueToStaff_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueTostaff_rdate, 100) issueTostaff_rdate, case when issueTostaff_rdate>GETDATE() then 'N' else 'L' end as Late   
		from L_issueToStaff, L_book, l_bookstockdet, l_usr
		where 
			usr_kid =issueToStaff_iuser
			and issueToStaff_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToStaff_StaffID= @StaffID
		order by issueToStaff_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStaff_Print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_issueToStaff_Print] --1
@id int = null 
as
begin
		select CONVERT(nvarchar(10),issueToStaffMast_date, 103) IssueDate ,  usr_name, usr_code, Staff_name  from L_issueToStaffMast, L_Staff, l_usr where   Staff_kid = issueToStaffMast_StaffID and usr_kid = issueToStaffMast_USER and issueToStaffMast_kid=@id 

		select   bookstockdet_bookrefID , book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,convert(nvarchar(10),issueToStaff_rdate , 105) returndate  from  L_issueToStaff, l_book, l_bookstockdet where  
		  issueToStaff_bookstockdetID = bookstockdet_kid
		and bookstockdet_bookid  = book_kid 
		and issueToStaff_issueToStaffMastId=@id 
end
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStaff_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
  
 
 
 
create   proc [dbo].[L_issueToStaff_save]
@StaffID int = null,
@stockID nvarchar(max) = null,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxstaffdays from  l_par where par_kid =1  
 
		insert into L_issueToStaffMast (issueToStaffMast_date, issueToStaffMast_USER,issueToStaffMast_staffID )
		values(GETDATE(), @usrID, @StaffID)
		set @id = SCOPE_IDENTITY();
		
		insert into L_issueToStaff(issueToStaff_StaffID, issueToStaff_bookstockdetID, issueToStaff_issuedate, issueToStaff_iuser, issueToStaff_status,issueTostaff_rdate, issueToStaff_issueToStaffMastID)
		select @StaffID, item, GETDATE(), @usrID, 'I',case @rmaxdate when null then null else   DATEADD(d, @rmaxdate, GETDATE()) end, @id from fnSplit(@stockID, ',')
		
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStudent_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
create   proc [dbo].[L_issueToStudent_get] --@StudentID=1
@bookid nvarchar(50)= null,  
@StudentID nvarchar(50) = null,
@flag char(1)= null
as
begin
	 
	 if(@flag= 'L')
	begin
		select Student_kid,Student_name from l_Student where student_stID=@StudentID and Student_status=1
		select  par_maxstudentdays,par_maxbooktostudent from  l_par where par_kid =1 
	end 
	else if(@bookid is not null)
	begin
			select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13  from view_l_stockdet  where  bookstockdet_bookrefID=@bookid  
	end 
	else if (@StudentID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueToStudent_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueToStudent_issuedate, 100)issueToStudent_issuedate, usr_name,  bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category, issueToStudent_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueTostudent_rdate, 100) issueTostudent_rdate, case when issueTostudent_rdate>GETDATE() then 'N' else 'L' end as Late   
		from L_issueToStudent, L_book, l_bookstockdet, l_usr
		where 
			usr_kid =issueToStudent_iuser
			and issueToStudent_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToStudent_StudentID= @StudentID
		order by issueToStudent_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStudent_print]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_issueToStudent_print] --1
@id int = null 
as
begin
		select CONVERT(nvarchar(10),issueToStudentMast_date, 103) IssueDate ,  usr_name, usr_code, Student_name  from L_issueToStudentMast, L_Student, l_usr where   Student_kid = issueToStudentMast_staffID and usr_kid = issueToStudentMast_USER and issueToStudentMast_kid=@id 

		select   bookstockdet_bookrefID , book_title,   book_subtitle, book_isbn10,   book_isbn13,
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, (select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,
	book_publisher book_publisherID,CONVERT(nvarchar(50), book_publishedDate, 100)  book_publishedDate, 
	( SELECT STRING_AGG (CONVERT(NVARCHAR(max),category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,convert(nvarchar(10),issueToStudent_rdate , 105) returndate  from  L_issueToStudent, l_book, l_bookstockdet where  
		  issueToStudent_bookstockdetID = bookstockdet_kid
		and bookstockdet_bookid  = book_kid 
		and issueToStudent_issueToStudentMastId=@id 
end
GO
/****** Object:  StoredProcedure [dbo].[L_issueToStudent_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
create      proc [dbo].[L_issueToStudent_save]
@StudentID int = null,
@stockID nvarchar(max) = null,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxstudentdays from  l_par where par_kid =1  
 
		insert into L_issueTostudentMast (issueToStudentMast_date, issueToStudentMast_USER, issueToStudentMast_staffID )
		values(GETDATE(), @usrID, @studentID)
		set @id = SCOPE_IDENTITY();
		
		insert into L_issueTostudent(issueTostudent_studentID, issueTostudent_bookstockdetID, issueTostudent_issuedate, issueTostudent_iuser, issueTostudent_status,issueTostudent_rdate, issueTostudent_issueTostudentMastID)
		select @studentID, item, GETDATE(), @usrID, 'I',case @rmaxdate when null then null else   DATEADD(d, @rmaxdate, GETDATE()) end, @id from fnSplit(@stockID, ',')
		
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 

        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_itemGroup_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_itemGroup_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  itemGroup_kid,   itemGroup_name,   itemGroup_status     from  l_itemGroup  where itemGroup_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by itemGroup_name ) row,     itemGroup_kid,  itemGroup_name,   itemGroup_status    from  l_itemGroup  order by itemGroup_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_itemGroup_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_itemGroup_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@itemGroup nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_itemGroup  where itemGroup_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_itemGroup set itemGroup_status = @status, itemGroup_udate= GETDATE(),itemGroup_uusrid = @usrID where itemGroup_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_itemGroup where   itemGroup_name = @itemGroup    and itemGroup_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_itemGroup  set  itemGroup_name=@itemGroup,   itemGroup_udate=GETDATE(),  itemGroup_uusrid=@usrID   where itemGroup_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_itemGroup  ( itemGroup_name, itemGroup_status ,itemGroup_idate,  itemGroup_iusrid)
					values (@itemGroup,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_lnkbookshelf_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_lnkbookshelf_get]
@id int=null,
@flag char(1)=null
as
begin
	if(@flag='L')
	begin 
		select rack_kid,  rack_name from l_rack where rack_status=1 
	end 
	else
	if(@flag='R')
	begin 
		select shelf_kid , shelf_name from l_shelf where shelf_status=1 and shelf_rack= @id  
	end 
	else
	begin
		if(@id != 0)
		begin
			select row_number() over(order by (select 1)) as row,bookstockdet_bookrefID,  book_kid, book_title, book_subtitle, book_isbn13, bookstockdet_kid from l_book, l_bookstockdet  where book_kid= bookstockdet_bookid and  bookstockdet_kid not in (select  lnkbookshelf_bookID from L_lnkbookshelf  )
 
			select row_number() over(order by (select 1)) as row,bookstockdet_bookrefID,  book_kid, book_title, book_subtitle, book_isbn13, bookstockdet_kid from l_book , l_bookstockdet  where book_kid= bookstockdet_bookid and bookstockdet_kid  in (select  lnkbookshelf_bookID from L_lnkbookshelf where   lnkbookshelf_shelfId=@id)
		end
	end
 
end 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_lnkbookshelf_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
CREATE proc [dbo].[L_lnkbookshelf_save]
@id nvarchar(max)=null,
@shelf int=null,
@flag char(1)=null
as
begin
	begin try 
	begin tran 
		declare @ret int= null
		if(@flag = 'U')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from L_lnkbookshelf where lnkbookshelf_bookID in (select item from fnSplit(@id,',')) and lnkbookshelf_shelfId= @shelf
				set @ret=1
			end
			else
				set @ret=2
		end
		else if(@flag = 'L')
		begin
			insert into L_lnkbookshelf(lnkbookshelf_shelfId,lnkbookshelf_bookID)
			select @shelf,item from fnSplit(@id,',')
			set @ret=1
		end
		
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_MenuLink_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE proc [dbo].[L_MenuLink_get] --0
@id int=null,
@flag char(1)=null
as
begin
	if(@flag='L')
	begin
		select UserRoleName,UserRoleKid from UserRole where UserRoleStatus = 1
	end
	else
	begin
		if(@id != 0)
		begin
			select row_number() over(order by mnum_kid) as row,mnum_kid,(case when mnum_ParentID is not null then (select (case when t2.mnum_ParentID is not null then (select mnum_name from L_mnum as t3 where t3.mnum_kid = t2.mnum_ParentID) + ' >> ' else '' end) + mnum_name from L_mnum as t2 where t2.mnum_kid = a.mnum_ParentID) + ' >> ' else '' end) + mnum_name as mnum_name from L_mnum as a where mnum_kid not in (select MnumLnkRole_MnumID from L_MnumLnkRole where MnumLnkRole_UserRoleID = @id) and mnum_status = 1 order by mnum_name
 
			select row_number() over(order by mnum_kid) as row,mnum_kid,(case when mnum_ParentID is not null then (select (case when t2.mnum_ParentID is not null then (select mnum_name from L_mnum as t3 where t3.mnum_kid = t2.mnum_ParentID) + ' >> ' else '' end) + mnum_name from L_mnum as t2 where t2.mnum_kid = a.mnum_ParentID) + ' >> ' else '' end) + mnum_name as mnum_name from L_mnum as a,L_MnumLnkRole where mnum_kid= MnumLnkRole_MnumID and mnum_status = 1 and MnumLnkRole_UserRoleID = @id order by mnum_name
		end
	end
end
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_MenuLink_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[L_MenuLink_save]
@id        NVARCHAR(max)=null,
@profileID INT=null,
@flag      CHAR(1)=null,
@usrid     INT=null
 
as
begin
	begin try 
	begin tran 
		if(@flag = 'U')
		begin
			delete from L_MnumLnkRole where MnumLnkRole_MnumID in (select item from fnSplit(@id,',')) and MnumLnkRole_UserRoleID = @profileID
		end
		else if(@flag = 'L')
		begin
			--declare @tmp table (id int)
 
			--insert into @tmp
			--select item from fnSplit(@id,','),L_MnumLnkRole where item = MnumLnkRole_MnumID and MnumLnkRole_UserRoleID = @profileID
 
			insert into L_MnumLnkRole (MnumLnkRole_UserRoleID,MnumLnkRole_MnumID,MnumLnkRole_iusrid,MnumLnkRole_idate)
			select @profileID,item,@usrid,getdate() from fnSplit(@id,',') where item not in (select MnumLnkRole_MnumID from  L_MnumLnkRole where  MnumLnkRole_UserRoleID = @profileID)
		end
 
		if(@@ERROR = 0)
		begin
			commit tran
			select 1
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
 
end
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_MenuSearch_byBox]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
--Created By Gopal jangir 11-7-2020
CREATE proc [dbo].[L_MenuSearch_byBox] --'l','Admin'
@Name nvarchar(200)=null,
@Role nvarchar(10)=null
as
begin
	select mnum_name as label,mnum_redirectto as value from L_mnum,L_mnumlnkrole,UserRole
	where mnum_kid = MnumLnkRole_MnumID
	and MnumLnkRole_UserRoleID = UserRoleKid
	and UserRoleName = @Role
	and mnum_name  like '%' + @Name + '%'
	and mnum_ParentID is not null
	and mnum_redirectto is not null
end
 
GO
/****** Object:  StoredProcedure [dbo].[L_mnum_Menu_Get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE   proc [dbo].[L_mnum_Menu_Get]   --'Admin'
@userRole nvarchar(100)
as
begin
	select mnum_name,mnum_parentid,mnum_image,mnum_kid, mnum_redirectto from L_mnum as t1,UserRole,L_mnumlnkrole
	where userrolename = @userRole
	and UserRoleKid = mnumlnkrole_userroleID
	and mnum_kid = mnumlnkrole_mnumid
	and mnum_status = 1
	and mnum_parentid is null
	order by mnum_order
 
	select mnum_name,mnum_parentid,mnum_image,mnum_redirectto,mnum_kid,(case when mnum_ParentID is not null then (select (case when t2.mnum_ParentID is not null then (select mnum_name from l_mnum as t3 where t3.mnum_kid = t2.mnum_ParentID) + ' / ' else '' end) + mnum_name from l_mnum as t2 where t2.mnum_kid = a.mnum_ParentID) + ' / ' else '' end) + mnum_name as mnum_parent from l_mnum as a,UserRole,l_mnumlnkrole
	where userrolename = @userRole
	and UserRoleKid = mnumlnkrole_userroleID
	and a.mnum_kid = mnumlnkrole_mnumid
	and a.mnum_status = 1
	and a.mnum_parentid is not null
	order by mnum_order
 
 
end
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_Numsystem_insert]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
-- =============================================
-- =============================================
CREATE PROCEDURE [dbo].[l_Numsystem_insert]
	-- Add the parameters for the stored procedure here
    @numtypeid int=0, 
	@numtype nvarchar(5)='Emp', --'emp' for emp code, 
	@usrID int=null, -- user id
	@dt date = null, -- current date	
	@NumType_format char(1)='C', 
	@formate nvarchar(10)=''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	begin try        
       begin tran 
	
		declare @id int =0
		declare @pre nvarchar(50)=null
		declare @presept nvarchar(3)=null
		declare @post nvarchar(50)=null
		declare @postsept nvarchar(3)=null
		declare @no numeric(12)=0
		declare @length numeric(2, 0)=0
		declare @number nvarchar(10)=null
		declare @formateset nvarchar(10)=''
		declare @id1 int =0
		declare @PrePost char(1)='B'  
		declare @fdt date
		declare @tdt date
 
    if @NumType_format='C' begin
		insert into l_NumSysC(NumSysC_NumTypeId, NumSysC_Pre, NumSysC_Post, NumSysC_Length, NumSysC_No, NumSysC_Date, NumSysC_UsrId)
					values(@numtypeid, null, null, 5, 0, getdate(), @usrID) 
	end
	else if @NumType_format='D' begin
		set @formateset = FORMAT( @dt, @formate)		
 
		select top 1  @pre=NumSysD_Pre, @presept=NumSysD_PreSept, @prepost=NumSysD_FormatPrePost, @no=NumSysD_No, @post=NumSysD_Post, @PostSept=NumSysD_PostSept, @length=NumSysD_Length from l_NumSysD  with(nolock) where NumSysD_NumTypeId = @NumTypeid 
			   order by NumSysD_kid desc
			
			SET @length=ISNULL(@length, 0)
 
		insert into l_NumSysD(NumSysD_NumTypeId, NumSysD_Pre, NumSysD_PreSept, NumSysD_Format, NumSysD_FormatPrePost, NumSysD_No, NumSysD_Post, NumSysD_PostSept, NumSysD_Length, NumSysD_date, NumSysD_usrId, NumSysD_CDate)
			values(@numTypeId, @pre, @preSept, @formateset, isnull(@PrePost, 'B'), 0, @post, @postSept, @length, getdate(), @usrID, @dt) 
	end
	else if @NumType_format='M' begin
		set @formateset = FORMAT( @dt, @formate)		
 
		select top 1  @pre=NumSysm_Pre, @presept=NumSysm_PreSept, @prepost=NumSysm_FormatPrePost, @no=NumSysm_No, @post=NumSysm_Post, @PostSept=NumSysm_PostSept, @length=NumSysm_Length
				from l_NumSysm  with(nolock) where NumSysm_NumTypeId = @NumTypeid 	   order by NumSysm_kid desc
			
		SET @length=ISNULL(@length, 0)
 
		insert into l_NumSysm(NumSysm_NumTypeId, NumSysm_Pre, NumSysm_PreSept, NumSysm_Format, NumSysm_FormatPrePost, NumSysm_No, NumSysm_Post, NumSysm_PostSept, NumSysm_Length, NumSysm_date, NumSysm_usrId, NumsysM_year, NumsysM_Month)
		 values(@numTypeId, @pre, @preSept, @formateset, isnull(@PrePost, 'B'), 0, @post, @postSept, @length, getdate(), @usrID, FORMAT( @dt, 'yyyy'), FORMAT( @dt, 'MM')) 
	
	end
	else if @NumType_format='Y' begin  -- calender yer
	
	   set @formateset = FORMAT( @dt, @formate)		
 
		select top 1  @pre=NumSysy_Pre, @presept=NumSysy_PreSept, @prepost=NumSysy_FormatPrePost, @no=NumSysy_No, @post=NumSysy_Post, @PostSept=NumSysy_PostSept, @length=NumSysy_Length
				from l_NumSysy  with(nolock) where NumSysy_NumTypeId = @NumTypeid 	  order by NumSysy_kid desc
			
		SET @length=ISNULL(@length, 0)
 
		insert into l_NumSysy(NumSysy_NumTypeId, NumSysy_Pre, NumSysy_PreSept, NumSysy_Format, NumSysy_FormatPrePost, NumSysy_No, NumSysy_Post, NumSysy_PostSept, NumSysy_Length, NumSysy_date, NumSysy_usrId, Numsysy_year )
		 values(@numTypeId, @pre, @preSept, @formateset, isnull(@PrePost, 'B'), 0, @post, @postSept, @length, getdate(), @usrID, FORMAT( @dt, 'yyyy')) 
	end
	else if @NumType_format='F' begin  -- financial year Basis
		 declare @fid int=0
		 
 
		 select @fid=Fyear_kid from l_Fyear where CONVERT(date, @dt, 105) between  CONVERT(date, Fyear_From, 105) and CONVERT(date, Fyear_to, 105)
		 if @fid=0 begin
			exec l_Fyear_insert @usrID = @usrID, @dt=@dt, @fid=@fid output
		 end
		 
		 select @fdt=CONVERT(date, fyear_from, 105), @tdt=CONVERT(date, fyear_to, 105) from l_Fyear  where Fyear_kid=@fid
 
		 if @formate='YYYY-YYYY' begin
			set @formateset = FORMAT( @fdt, 'YYYY') + '-' + FORMAT( @tdt, 'YYYY')				
		 end
		 else if @formate='YYYY-YY' begin
			set @formateset = FORMAT( @fdt, 'YYYY') + '-' + FORMAT( @tdt, 'YY')				
		 end
		 else if @formate='YY-YY' begin
			set @formateset = FORMAT( @fdt, 'YY') + '-' + FORMAT( @tdt, 'YY')				
		 end
 
		select top 1 @pre=NumSysf_Pre, @presept=NumSysf_PreSept, @prepost=NumSysf_FormatPrePost, @no=NumSysf_No, @post=NumSysf_Post, @PostSept=NumSysf_PostSept, @length=NumSysf_Length
				from l_NumSysf  with(nolock) where NumSysf_NumTypeId = @NumTypeid 	  order by NumSysf_kid desc
			
		SET @length=ISNULL(@length, 0)
 
		insert into l_NumSysf(NumSysf_NumTypeId, NumSysf_Pre, NumSysf_PreSept, NumSysf_Format, NumSysf_FormatPrePost, NumSysf_No, NumSysf_Post, NumSysf_PostSept, NumSysf_Length, NumSysf_date, NumSysf_usrId, NumsysF_Fyearid )
		 values(@numTypeId, @pre, @preSept, @formateset, isnull(@PrePost, 'B'), 0, @post, @postSept, @length, getdate(), @usrID, @fid) 
 
	end
	else if @NumType_format='A' begin  -- acedmic year Basis
		 declare @Aid int=0
		 select @Aid=Ayear_kid from l_Ayear where CONVERT(date, @dt, 105) between  CONVERT(date, Ayear_From, 105) and CONVERT(date, Ayear_to, 105)
		 if @Aid=0 begin
			exec l_Ayear_insert @usrID = @usrID, @dt=@dt, @Aid=@Aid output
		 end
		 --set @formateset = FORMAT( @dt, @formate)		
		  select @fdt=CONVERT(date, Ayear_from, 105), @tdt=CONVERT(date, Ayear_to, 105) from l_Ayear  where Ayear_kid=@Aid
 
		 if @formate='YYYY-YYYY' begin
			set @formateset = FORMAT( @fdt, 'YYYY') + '-' + FORMAT( @tdt, 'YYYY')				
		 end
		 else if @formate='YYYY-YY' begin
			set @formateset = FORMAT( @fdt, 'YYYY') + '-' + FORMAT( @tdt, 'YY')				
		 end
		 else if @formate='YY-YY' begin
			set @formateset = FORMAT( @fdt, 'YY') + '-' + FORMAT( @tdt, 'YY')				
		 end
 
		select top 1 @pre=NumSysA_Pre, @presept=NumSysA_PreSept, @prepost=NumSysA_FormatPrePost, @no=NumSysA_No, @post=NumSysA_Post, @PostSept=NumSysA_PostSept, @length=NumSysA_Length
				from l_NumSysA  with(nolock) where NumSysA_NumTypeId = @NumTypeid 	   order by NumSysA_kid desc
			
		SET @length=ISNULL(@length, 0)
 
		insert into l_NumSysA(NumSysA_NumTypeId, NumSysA_Pre, NumSysA_PreSept, NumSysA_Format, NumSysA_FormatPrePost, NumSysa_No, NumSysA_Post, NumSysA_PostSept, NumSysA_Length, NumSysA_date, NumSysA_usrId, NumsysA_Ayearid )
		 values(@numTypeId, @pre, @preSept, @formateset, isnull(@PrePost, 'B'), 0, @post, @postSept, @length, getdate(), @usrID, @Aid) 
 
	end
 
	
if @@ERROR=0 
begin        
	commit tran        	
end           
         
end try        
begin catch
	ROLLBACK TRAN        
	declare @ErrorNumber int=null, @ErrorSeverity int=null, @ErrorState int=null, @ErrorProcedure nvarchar(max)=null, @ErrorLine int=null, @ErrorMessage nvarchar(max)=null;
 
	SELECT @ErrorNumber=ERROR_NUMBER(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE(), @ErrorProcedure=ERROR_PROCEDURE(), @ErrorLine=ERROR_LINE(), @ErrorMessage=ERROR_MESSAGE();           
 
	exec [ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber, @ERROR_SEVERITY=@ErrorSeverity, @ERROR_STATE=@ErrorState, @ERROR_PROCEDURE=@ErrorProcedure, @ERROR_LINE=@ErrorLine, @ERROR_MESSAGE=@ErrorMessage, @usrId = @usrID, @ManulDiscription=null ;
end catch         	
end
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Numsystem_Setget]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
-- =============================================
-- =============================================
CREATE PROCEDURE [dbo].[L_Numsystem_Setget] --6,'EMP',1,'27/06/2021'
	-- Add the parameters for the stored procedure here
	@numtype nvarchar(5)='BOOK',   --'emp' for emp code , 
	@userId int=null, -- user id
	@cdate date = null  -- current date
	,@preO nvarchar(20) output
	,@postO nvarchar(20) output
	,@noO nvarchar(10) output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	begin try        
       begin tran 
	   	declare @NumType_format char(1)='C'
		declare @id int =0
		declare @pre nvarchar(50)=null
		declare @presept nvarchar(3)=null
		declare @post nvarchar(50)=null
		declare @postsept nvarchar(3)=null
		declare @no numeric(12)=0
		declare @length numeric(2,0)=0
		declare @number nvarchar(10)=null
		declare @NumTypeid int=0
		declare @formate nvarchar(10)=''
		declare @formateset nvarchar(10)=''
		declare @dt DATE=convert(date,@cdate,105)
		declare @id1 int =0
		declare @PrePost char(1)='B'  
 
	IF((SELECT COUNT(NumType_kid) FROM l_NumType  where NumType_type=@numtype  )=0 )
	begin
	
		insert into L_NumType ( NumType_type,  NumType_format,  NumType_date,  NumType_formatzid,  NumType_status, NumType_usrid)
		values(UPPER(@numtype), @NumType_format, getdate(), '', 1, @userId)
	end 
	select @NumType_format=NumType_format,@NumTypeid=NumType_kid ,@formate=NumType_formatzid from L_NumType where NumType_type=@numtype  
	if @NumType_format='C' begin  -- continues number system
			select top 1 @id = NumSysC_kid from l_NumSysC with(nolock) where NumSysC_NumTypeId = @NumTypeid   order by NumSysC_kid desc
			if ISNULL(@id, 0)=0 begin			
				exec   l_Numsystem_insert  @NumTypeid=@NumTypeid,  @numtype=@numtype, @usrID = @userId, @dt=@dt, @NumType_format='C'
			end	
			update L_NumSysC set NumSysC_No=NumSysC_No+1 where NumSysC_NumTypeId = @NumTypeid
			select top 1 @pre=NumSysC_Pre,@post=NumSysC_Post,@length=NumSysC_Length,@no=NumSysC_No from  L_NumSysC where NumSysC_NumTypeId = @NumTypeid 
			order by NumSysC_kid desc
	end
	else if @NumType_format='D' begin  -- Daily number system		
		update L_NumSysD set NumSysD_No=NumSysD_No+1 where  NumSysD_NumTypeId = @NumTypeid and convert(date, NumSysD_CDate, 105) = convert(date, @cdate, 105)
		
 
		select @pre=NumSysD_Pre,@presept=NumSysD_PreSept,@prepost=NumSysD_FormatPrePost,@no=NumSysD_No
		,@formateset=NumSysD_Format,@post=NumSysD_Post,@PostSept=NumSysD_PostSept,@length=NumSysD_Length from L_NumSysD  with(nolock) where NumSysD_NumTypeId = @NumTypeid 
		and convert(date, NumSysD_CDate, 105) = convert(date, @cdate, 105)	   order by NumSysD_kid desc
		
		
	end
	else if @NumType_format='M' begin  -- monthly number system		
		update L_NumSysM  set NumsysM_No=NumsysM_No+1 where NumSysm_NumTypeId = @NumTypeid 
		and   NumSysm_month=FORMAT( @dt, 'MM')
		and   NumSysm_year=FORMAT( @dt, 'yyyy')		
		
		select @pre=NumSysm_Pre,@presept=NumSysm_PreSept,@prepost=NumSysm_FormatPrePost,@no=NumSysm_No
		,@formateset=NumSysm_Format,@post=NumSysm_Post,@PostSept=NumSysm_PostSept,@length=NumSysm_Length 
		from L_NumSysm
		where
		NumSysm_NumTypeId = @NumTypeid 
		and   NumSysm_month=FORMAT( @dt, 'MM')
		and   NumSysm_year=FORMAT( @dt, 'yyyy')		
		 order by NumSysm_kid desc
		
		
	end
	else if @NumType_format='Y' begin  --Yearly number system		
		update L_NumSysy set NumsysY_No=NumsysY_No+1  where NumSysy_NumTypeId = @NumTypeid 		
		and   NumSysy_year=FORMAT( @dt, 'yyyy')		
		
		
		select @pre=NumSysy_Pre,@presept=NumSysy_PreSept,@prepost=NumSysy_FormatPrePost,@no=NumSysy_No
		,@formateset=NumSysy_Format,@post=NumSysy_Post,@PostSept=NumSysy_PostSept,@length=NumSysy_Length 
		from L_NumSysy  
		where
		NumSysy_NumTypeId = @NumTypeid 		
		and   NumSysy_year=FORMAT( @dt, 'yyyy')	   order by NumSysy_kid desc		
	end
	else if @NumType_format='F' begin  --Financial Yearly number system		
		 declare @fid int=0
		 select @fid=Fyear_kid from h_Fyear where CONVERT(date,@dt,105) between  CONVERT(date,Fyear_From,105) and CONVERT(date,Fyear_to,105)
 
		update L_NumSysf set Numsysf_No=Numsysf_No+1  where NumsysF_numTypeId = @NumTypeid 		
		and   NumsysF_Fyearid=@fid	 
		
		select @pre=NumSysf_Pre,@presept=NumSysf_PreSept,@prepost=NumSysf_FormatPrePost,@no=NumSysf_No
		,@formateset=NumSysf_Format,@post=NumSysf_Post,@PostSept=NumSysf_PostSept,@length=NumSysf_Length 
		from L_NumSysf 
		where
		NumSysf_NumTypeId = @NumTypeid 		
		and   NumsysF_Fyearid=@fid  order by NumSysf_kid desc		
	end
	else if @NumType_format='A' begin  --acemic Yearly number system		
		 declare @Aid int=0
		 select @Aid=Ayear_kid from h_Ayear where CONVERT(date,@dt,105) between  CONVERT(date,Ayear_From,105) and CONVERT(date,Ayear_to,105)
 
		update L_NumSysA set NumsysA_No=NumsysA_No+1  where NumsysA_numTypeId = @NumTypeid 		
		and   NumsysA_Ayearid=@Aid 
		
		select @pre=NumSysA_Pre,@presept=NumSysA_PreSept,@prepost=NumSysA_FormatPrePost,@no=NumSysA_No
		,@formateset=NumSysA_Format,@post=NumSysA_Post,@PostSept=NumSysA_PostSept,@length=NumSysA_Length 
		from L_NumSysA 
		where
		NumSysA_NumTypeId = @NumTypeid 		
		and   NumsysA_ayearid=@aid  order by NumSysa_kid desc		
	end
 
 
	 if @NumType_format in ('M','D','Y','F','A') begin
		if @prepost='A' BEGIN
		SET @pre=ISNULL(@pre,'') + @formateset + ISNULL(@presept,'')
			SET @post= ISNULL(@postsept,'') + ISNULL(@POST,'') 
		END
		ELSE BEGIN
				SET @pre=ISNULL(@pre,'') + ISNULL(@presept,'')
			SET @post= ISNULL(@postsept,'') + @formateset + ISNULL(@POST,'') 
		END
	 end
 
	set  @number= dbo.[Fun_C_NumberSystem_SetLength] (@no,@length)
	set  @number= @number  + convert(varchar(10),@no)
 
	 set @preO=@Pre
	 set @postO=@Post
	 set @noO=@number
 
 
	--select @pre as pre,@post as post,@number as [number], isnull(@pre,'') + isnull(@number,'') + isnull(@post,'') as Autonum
 
 
	
if @@ERROR=0 
begin        
	commit tran        	
end           
         
end try        
begin catch
	ROLLBACK TRAN        
	declare @ErrorNumber int=null,  @ErrorSeverity int=null,  @ErrorState int=null,  @ErrorProcedure nvarchar(max)=null,  @ErrorLine int=null,  @ErrorMessage nvarchar(max)=null;
 
	SELECT @ErrorNumber=ERROR_NUMBER(),  @ErrorSeverity=ERROR_SEVERITY(),  @ErrorState=ERROR_STATE(),  @ErrorProcedure=ERROR_PROCEDURE(),  @ErrorLine=ERROR_LINE(),  @ErrorMessage=ERROR_MESSAGE();           
 
	exec [ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,    @ERROR_SEVERITY=@ErrorSeverity,  @ERROR_STATE=@ErrorState,  @ERROR_PROCEDURE=@ErrorProcedure,  @ERROR_LINE=@ErrorLine,  @ERROR_MESSAGE=@ErrorMessage,  @userid=@userID, @ManulDiscription=null ;
end catch         	
end
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[l_profile_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[l_profile_get]-- 5
@id int = null 
as
begin
	select usr_name, usr_code,  UserRoleName, usr_staffID,usr_studentID  from l_usr, UserRole where usr_UserRoleID=UserRoleKid and usr_kid=@id
	Declare @staffid int = null, @studentID int = null
	select @staffid=  usr_staffID,@studentID =usr_studentID  from l_usr where   usr_kid=@id
	if(@staffid is not null )
	begin
		select staff_kid, staff_name, staff_status, staff_idate, staff_udate, staff_iusrid, staff_uusrid, staff_parent,case staff_gender when 'M' then 'Male' when 'F' then 'Female' else 'Other' end staff_gender , staff_Mob_No, staff_Address, staff_DOJ, staff_Designationid, staff_Deptid, staff_Photo, staff_EmailID, staff_staffID,designation_name, Dept_name,  (select top 1  file_path from L_File where File_Type=2 and File_id=staff_kid order by File_Kid desc ) file_path  from  l_staff, l_designation, L_Dept where   staff_Designationid= designation_kid and  staff_Deptid = Dept_kid and staff_kid=@staffid
	end
	if(@studentID is not null)
	begin
		select student_kid, student_name, student_status, student_idate, student_udate, student_iusrid, student_uusrid, student_parent, case student_gender when 'M' then 'Male' when 'F' then 'Female' else 'Other' end student_gender, student_Mob_No, student_Address, student_DOJ, student_Course, student_Branch, student_Photo, student_EmailID, student_stID, Branch_name, Course_name,  (select top 1 file_path from L_File where File_Type=1 and File_id=student_kid order by File_Kid desc ) file_path from l_student, l_course, l_branch where  student_Branch= Branch_kid and   student_Course= Course_kid and student_kid=@studentID
	end 
		
end 

 
GO
/****** Object:  StoredProcedure [dbo].[L_rack_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_rack_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  rack_kid,   rack_name,   rack_status     from  l_rack  where rack_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by rack_name ) row,     rack_kid,  rack_name,   rack_status    from  l_rack  order by rack_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Rack_getSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
CREATE proc [dbo].[L_Rack_getSave]  
@flag char(1)='L',
@kid int=0,
@name nvarchar(50)=null,
@iuser int=null,
@Acc_status char(1)=null
as
 SET NOCOUNT ON                   
	BEGIN TRY         
	BEGIN TRAN 
	 DECLARE @Pkey INT;
	if @flag = 'L'   --show on Grir View
	begin
		select Rack_Kid,Rack_Name,Rack_Status from l_rack  order by Rack_Name
	end
	if @flag = 'E'    ---  data Edit
	begin
		select Rack_Kid,Rack_Name,Rack_Status from l_rack where Rack_Kid=@kid
	end
	if @flag = 'D'   --Delete
	begin
		delete from l_rack where Rack_Kid=@kid
		SELECT 1
	end
	if @flag = 'S'	-- Savivg Data
	begin               
		declare @duplicate int=0 
		select @duplicate=COUNT(*) from l_rack where Rack_Name = @name and Rack_Kid != @kid
		if @duplicate = 0 and @kid = 0	begin
			insert into l_rack (Rack_Name,Rack_iusrid,Rack_Status) 
			values (@name,@iuser,@Acc_status)
			select 1
		end
		else if @duplicate = 0 and @kid != 0	
		begin
			update l_rack set Rack_Name=@name,Rack_Status=@Acc_status where Rack_Kid = @kid
			select 2
		end
		else
			select 0
			
	end
 		IF @@ERROR = 0 begin      
            COMMIT TRAN       
        END         
END TRY        
BEGIN CATCH        
 -- Execute the error retrieval routine.      
        ROLLBACK TRAN        
	   SELECT         
			ERROR_NUMBER() AS ErrorNumber,        
			ERROR_SEVERITY() AS ErrorSeverity,        
			ERROR_STATE() as ErrorState,        
			ERROR_PROCEDURE() as ErrorProcedure,        
			ERROR_LINE() as ErrorLine,        
			replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
    declare @ErrorNumber int=null
    declare @ErrorSeverity int=null
    declare @ErrorState int=null
    declare @ErrorProcedure nvarchar(max)=null
    declare @ErrorLine int=null
    declare @ErrorMessage nvarchar(max)=null
     SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
    exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	/*End*/         
END CATCH
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_rack_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_rack_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@rack nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_rack  where rack_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_rack set rack_status = @status, rack_udate= GETDATE(),rack_uusrid = @usrID where rack_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_rack where   rack_name = @rack    and rack_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_rack  set  rack_name=@rack,   rack_udate=GETDATE(),  rack_uusrid=@usrID   where rack_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_rack  ( rack_name, rack_status ,rack_idate,  rack_iusrid)
					values (@rack,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromdepartment_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromdepartment_get] --  @deptID= 1
@bookid nvarchar(50)= null,  
@flag char(1)= null, 
@deptID int = null
as
begin
	Declare @fineType char(1)=null, @amt decimal(18,2)=  null , @fineID int = null
	 select @fineType=  finemast_finetype,@amt=finemast_Amt,@fineID=finemast_kid from l_finemast where finemast_userType='D'
	Declare @fineamt table (id int identity(1,1), fromdt int, todt int , amt decimal(18,2))
	if(@fineType='V')
	begin
		 insert into @fineamt(fromdt, todt, amt)
		 select finemastdet_from,finemastdet_to, finemastdet_amt  from l_finemastdet where finemastdet_finemastID= @fineID
	end
 
	if(@flag='L')
	begin
		select Dept_kid, Dept_name from l_dept where Dept_status=1 
	end 
	else if(@bookid is not null)
	begin
		select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13, issueToDept_rdate, 
		case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueToDept_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueToDept_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end    fine,
		issueToDept_kid  from L_issueToDept,L_book, l_bookstockdet   where issueToDept_kid not in (select returnToDept_issuetoDeptID FROM [L_returnToDEPT]) AND   issueToDept_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and  bookstockdet_bookrefID=@bookid  and issueToDept_deptID= @deptID
	end 
	else if (@deptID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueToDept_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueToDept_issuedate, 100)issueToDept_issuedate, usr_name,  bookstockdet_edition, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,   issueToDept_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueToDept_rdate, 100) issueToDept_rdate,case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueToDept_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueToDept_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueToDept_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end    fine  , DATEDIFF(DD,issueToDept_rdate , GETDATE())
		from L_issueToDept, L_book, l_bookstockdet, l_usr
		where 
		issueToDept_kid not in (select returnToDept_issuetoDeptID FROM [L_returnToDEPT]) AND 
			issueToDept_status = 'I' and 
			usr_kid =issueToDept_iuser
			and issueToDept_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToDept_deptID= @deptID
		order by issueToDept_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromdepartment_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromdepartment_save]
@issueID int = null,
@remark nvarchar(500)= null ,
@fine decimal(18,2)=0,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxdeptdays from  l_par where par_kid =1 
 
		insert into [dbo].[L_returnToDept](returnToDept_returndate, returnToDept_iuser, returnToDept_issuetoDeptID, returnToDept_fine , returnToDept_remark)
		values(GETDATE(),  @usrID, @issueID, @fine, @remark  )
 
 		update l_issuetoDept  set issueToDept_status='R' where issueToDept_kid=@issueID
		
		set @id = SCOPE_IDENTITY();
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromstaff_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromstaff_get] --rr@staffID= 1
@bookid nvarchar(50)= null,  
@flag char(1)= null, 
@staffID nvarchar(50) = null
as
begin
	
	Declare @fineType char(1)=null, @amt decimal(18,2)=  null , @fineID int = null
	 select @fineType=  finemast_finetype,@amt=finemast_Amt,@fineID=finemast_kid from l_finemast where finemast_userType='S'
	Declare @fineamt table (id int identity(1,1), fromdt int, todt int , amt decimal(18,2))
	if(@fineType='V')
	begin
		 insert into @fineamt(fromdt, todt, amt)
		 select finemastdet_from,finemastdet_to, finemastdet_amt  from l_finemastdet where finemastdet_finemastID= @fineID
	end	
 
	if(@flag='L')
	begin
		select staff_kid, staff_name from l_staff where staff_status=1  and @staffID = staff_staffID
	end 
	else if(@bookid is not null)
	begin
		select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13,   case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostaff_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostaff_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end     fine, issueTostaff_kid ,CONVERT(nvarchar(10), issueTostaff_rdate, 103)issueTostaff_rdate  from L_issueTostaff,L_book, l_bookstockdet   where  issueTostaff_kid not in (select returnToStaff_issuetoStaffID from [L_returnTostaff] ) and  issueTostaff_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and  bookstockdet_bookrefID=@bookid  	and issueTostaff_staffID= @staffID
	end 
	else if (@staffID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueTostaff_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueTostaff_issuedate, 100)issueTostaff_issuedate, usr_name,  bookstockdet_edition, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,   issueTostaff_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueTostaff_rdate, 100) issueTostaff_rdate, case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostaff_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostaff_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostaff_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end    fine 
		from L_issueTostaff, L_book, l_bookstockdet, l_usr
		where 
		issueTostaff_kid not in (select returnToStaff_issuetoStaffID from [L_returnTostaff] ) and 
			issueTostaff_status = 'I' and 
			usr_kid =issueTostaff_iuser
			and issueTostaff_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTostaff_staffID= @staffID
		order by issueTostaff_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromstaff_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromstaff_save]
@issueID int = null, 
@remark nvarchar(500)= null ,
@fine decimal(18,2)=0,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxstaffdays from  l_par where par_kid =1 
 
		insert into [dbo].[L_returnTostaff](returnTostaff_returndate, returnTostaff_iuser, returnTostaff_issuetostaffID, returnTostaff_fine , returnTostaff_remark)
		values(GETDATE(),  @usrID, @issueID, @fine, @remark  )
 

		update l_issuetostaff  set issueTostaff_status='R' where issueTostaff_kid=@issueID
		set @id = SCOPE_IDENTITY();
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromstudent_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromstudent_get] --rr@studentID= 1
@bookid nvarchar(50)= null,  
@flag char(1)= null, 
@studentID nvarchar(50) = null
as
begin
	Declare @fineType char(1)=null, @amt decimal(18,2)=  null , @fineID int = null
	select @fineType=  finemast_finetype,@amt=finemast_Amt,@fineID=finemast_kid from l_finemast where finemast_userType='U'
	Declare @fineamt table (id int identity(1,1), fromdt int, todt int , amt decimal(18,2))
	if(@fineType='V')
	begin
		 insert into @fineamt(fromdt, todt, amt)
		 select finemastdet_from,finemastdet_to, finemastdet_amt  from l_finemastdet where finemastdet_finemastID= @fineID
	end
 
	if(@flag='L')
	begin
		select student_kid, student_name from l_student where student_status=1  and  student_stID=@studentID
	end 
	else if(@bookid is not null)
	begin
		select book_title, book_subtitle, bookstockdet_edition, bookstockdet_kid, book_isbn13,  
		case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostudent_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostudent_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end 
        
          fine, issueTostudent_kid, CONVERT(nvarchar(10), issueTostudent_rdate, 103) issueTostudent_rdate  from L_issueTostudent,L_book, l_bookstockdet   where issueTostudent_kid not in (select returnToStudent_issuetoStudentID from [L_returnTostudent] ) and  issueTostudent_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and  bookstockdet_bookrefID=@bookid  
			and issueTostudent_studentID= @studentID
	end 
	else if (@studentID  is not null)
	begin
		select  ROW_NUMBER() over(order by issueTostudent_issuedate desc)row,  book_title, book_subtitle, book_isbn13, convert(nvarchar(50), issueTostudent_issuedate, 100)issueTostudent_issuedate, usr_name,  bookstockdet_edition, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher,   issueTostudent_status  , bookstockdet_bookrefID,CONVERT(nvarchar(50), issueTostudent_rdate, 100) issueTostudent_rdate,	case  when (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostudent_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) between fromdt and todt)), 0) end)  > 0
        then 
            (case @fineType when 'F' then @amt*(DATEDIFF(DD,issueTostudent_rdate , GETDATE())) else    
		isnull((select amt from @fineamt where ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) >=fromdt and todt is null)   or ((DATEDIFF(DD,issueTostudent_rdate , GETDATE())) between fromdt and todt)), 0)  end) 
        else 0 end 
         fine 
		from L_issueTostudent, L_book, l_bookstockdet, l_usr
		where 
			issueTostudent_kid not in (select returnToStudent_issuetoStudentID from [L_returnTostudent] ) and 
			issueTostudent_status = 'I' and 
			usr_kid =issueTostudent_iuser
			and issueTostudent_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTostudent_studentID= @studentID
		order by issueTostudent_issuedate desc
	end 
		
 
end 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnbooksfromstudent_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
create   proc [dbo].[L_returnbooksfromstudent_save]
@issueID int = null,
@stockID int = null,
@remark nvarchar(500)= null ,
@fine decimal(18,2)=0,
@usrID int = null
as
begin
begin try 
	begin tran 
	declare @ret int= null, @id int = null, @rmaxdate  int =0;
		select @rmaxdate= par_maxstudentdays from  l_par where par_kid =1 
 
		insert into [dbo].[L_returnTostudent](returnTostudent_returndate, returnTostudent_iuser, returnTostudent_issuetostudentID, returnTostudent_fine , returnTostudent_remark)
		values(GETDATE(),  @usrID, @issueID, @fine, @remark  )

		update l_issuetostudent  set issueTostudent_status='R' where issueTostudent_kid=@issueID
 
		set @id = SCOPE_IDENTITY();
		set @ret = 1;
	if(@@ERROR = 0)
	begin
		commit tran
		select @ret as val,@id as ID 
	end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnChecklist_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_returnChecklist_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  returnChecklist_kid,   returnChecklist_name,   returnChecklist_status     from  l_returnChecklist  where returnChecklist_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by returnChecklist_name ) row,     returnChecklist_kid,  returnChecklist_name,   returnChecklist_status    from  l_returnChecklist  order by returnChecklist_name 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_returnChecklist_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_returnChecklist_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@returnChecklist nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_returnChecklist  where returnChecklist_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_returnChecklist set returnChecklist_status = @status, returnChecklist_udate= GETDATE(),returnChecklist_uusrid = @usrID where returnChecklist_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_returnChecklist where   returnChecklist_name = @returnChecklist    and returnChecklist_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_returnChecklist  set  returnChecklist_name=@returnChecklist,   returnChecklist_udate=GETDATE(),  returnChecklist_uusrid=@usrID   where returnChecklist_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_returnChecklist  ( returnChecklist_name, returnChecklist_status ,returnChecklist_idate,  returnChecklist_iusrid)
					values (@returnChecklist,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_shelf_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_shelf_get]
@id int=null  ,
@flag char(1)= null 
as
begin 
	 if(@flag= 'L')
	 begin
		select rack_kid, rack_name from l_rack order by rack_name 
	 end 
	 else
	 begin
		if(@id is not null)
		begin
			select  shelf_kid,   shelf_name,   shelf_status  , shelf_rack   from  l_shelf where shelf_kid= @id 
		end
		else
		begin
			
			select ROW_NUMBER() over (order by shelf_name ) row,     shelf_kid,  shelf_name ,   shelf_status , shelf_rack , rack_name   from  l_shelf , l_rack where  shelf_rack =rack_kid  order by shelf_name 
 
		end
	end 
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Shelf_getSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
CREATE proc [dbo].[L_Shelf_getSave]  
@flag char(1)='L',
@kid int=0,
@name nvarchar(50)=null,
@iuser int=null,
@RackID int=null
as
 SET NOCOUNT ON                   
	BEGIN TRY         
	BEGIN TRAN 
	 DECLARE @Pkey INT;
	if @flag = 'L'
	begin
		select Shelf_Kid,Shelf_Name,Rack_Name as RackName from L_Shelf,L_Rack where Rack_Kid=Shelf_RackID  order by RackName,Shelf_Name
        select Rack_Kid,Rack_Name from L_Rack where Rack_Status='A' order by Rack_Name asc  
	end
	if @flag = 'E'
	begin
		select Shelf_Kid,Shelf_Name,Shelf_RackID from L_Shelf where Shelf_Kid=@kid
	end
	if @flag = 'D'
	begin
		delete from L_Shelf where Shelf_Kid=@kid
		SELECT 1
	end
	if @flag = 'S'
	begin
		declare @duplicate int=0 
		select @duplicate=COUNT(*) from L_Shelf where Shelf_Name = @name and Shelf_RackID=@RackID and Shelf_Kid != @kid
		if @duplicate = 0 and @kid = 0
		begin
			 EXEC GetPrimaryKey @tableName='L_Shelf',@PKColumnName='Shelf_Kid',@Pkey=@Pkey output 
			insert into L_Shelf (Shelf_Kid,Shelf_Name,Shelf_iusrID,Shelf_RackID) 
			values (@Pkey+1,@name,@iuser,@RackID)
			select 1
		end
		else if @duplicate = 0 and @kid != 0
		begin
			update L_Shelf set Shelf_Name=@name,Shelf_RackID=@RackID where Shelf_Kid = @kid
			select 2
		end
		else
			select 0
			
	end
 		IF @@ERROR = 0 begin      
            COMMIT TRAN       
        END         
END TRY        
BEGIN CATCH        
 -- Execute the error retrieval routine.      
        ROLLBACK TRAN        
	   SELECT         
			ERROR_NUMBER() AS ErrorNumber,        
			ERROR_SEVERITY() AS ErrorSeverity,        
			ERROR_STATE() as ErrorState,        
			ERROR_PROCEDURE() as ErrorProcedure,        
			ERROR_LINE() as ErrorLine,        
			replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
    declare @ErrorNumber int=null
    declare @ErrorSeverity int=null
    declare @ErrorState int=null
    declare @ErrorProcedure nvarchar(max)=null
    declare @ErrorLine int=null
    declare @ErrorMessage nvarchar(max)=null
     SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
    exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	/*End*/         
END CATCH
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_shelf_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_shelf_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@shelf nvarchar(50) = null ,
@rack int = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_shelf  where shelf_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_shelf set shelf_status = @status, shelf_udate= GETDATE(),shelf_uusrid = @usrID where shelf_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_shelf where   shelf_name = @shelf    and shelf_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_shelf  set  shelf_name=@shelf,   shelf_udate=GETDATE(),  shelf_uusrid=@usrID, shelf_rack=@rack   where shelf_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_shelf  ( shelf_name, shelf_status ,shelf_idate,  shelf_iusrid, shelf_rack)
					values (@shelf,  @status,  GETDATE(), @usrID, @rack)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_staff_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE     proc [dbo].[L_staff_get]
@id int=null  ,
@flag char(1)= null 
as
begin 
	if(@flag='L')
	begin
		select Dept_kid,Dept_name  from l_dept where Dept_status =1 order by Dept_name
		select designation_kid, designation_name  from l_designation where designation_status =1  order by designation_name 
		select UserRoleName,UserRoleKid  from UserRole where UserRoleStatus=1
	end
	else  if(@id is not null)
	begin
			select staff_kid, staff_name,  staff_status,   staff_parent, staff_gender, staff_Mob_No, staff_Address, convert (nvarchar(10),staff_DOJ) staff_DOJ, staff_Designationid, staff_Deptid, staff_Photo, staff_EmailID, staff_staffID, (select top 1  File_Path from L_File where File_Type=2 and File_id=staff_kid order by File_Kid desc) file_id, usr_code, usr_UserRoleID from l_staff left join l_usr on usr_staffID= staff_kid where staff_kid= @id 
	end
	else
	begin
			
		select ROW_NUMBER() over (order by staff_name ) row,   staff_kid, staff_name, staff_status,   staff_parent,case  staff_gender when 'M' then 'Male'   when 'F' then 'Female' else 'Other' end staff_gender, staff_Mob_No, staff_Address, convert (nvarchar(50),staff_DOJ, 103) staff_DOJ, designation_name, Dept_name, staff_Photo, staff_EmailID, staff_staffID , usr_code,(select UserRoleName from UserRole where UserRoleKid=usr_UserRoleID) usr_UserRole   from l_staff left join l_usr  on usr_staffID= staff_kid  , l_designation, L_Dept where designation_kid = staff_Designationid and  Dept_kid=staff_Deptid order by staff_name 
 
	end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_staff_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
CREATE    proc [dbo].[L_staff_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@address nvarchar(200)= null,  
@email nvarchar(50) =  null,  
@mobNo nvarchar(20)=null, 
@fname nvarchar(100)=null, 
@doj nvarchar(10)=null, 
@name nvarchar(100)=null, 
@sid nvarchar(50)=null, 
@dept int=null, 
@designation int=null, 
@gender char(1)=null,
 @usrName nvarchar(50)= null,
 @usrrole int =null
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_staff  where staff_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_staff set staff_status = @status, staff_udate= GETDATE(),staff_uusrid = @usrID where staff_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_staff where   staff_staffID = @sid    and staff_kid != isnull(@id,0)
			select @duplicate+=COUNT(*) from l_usr where   usr_code = @usrName    and usr_staffID != isnull(@id,0)
		
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_staff  set   staff_name=@name,     staff_parent=@fname, staff_gender=@gender, staff_Mob_No=@mobNo, staff_Address=@address, staff_DOJ=@doj, staff_Deptid=@dept, staff_Designationid=@designation,  staff_EmailID=@email, staff_staffID=@sid , staff_udate=GETDATE(),  staff_uusrid=@usrID  where staff_kid =@id 
 
						update l_usr set usr_code=@usrName, usr_name=@name, usr_UserRoleID=@usrrole, usr_contact=@mobNo,usr_email=@email,  usr_udate=GETDATE(), usr_uusrID=@usrID where usr_staffID=@id
  

					set @ret= 1
					
				end
				else
				begin
					insert into  l_staff  (  staff_name, staff_status,   staff_parent, staff_gender, staff_Mob_No, staff_Address, staff_DOJ, staff_Designationid, staff_Deptid,  staff_EmailID, staff_staffID, staff_iusrid, staff_idate )
					values (@name, 1, @fname, @gender, @mobNo, @address, @doj, @designation, @dept, @email, @sid, @usrID, GETDATE())
					  set @id = SCOPE_IDENTITY();

					insert into l_usr (usr_name, usr_code, usr_Pswd, usr_Status, usr_UserRoleID, usr_contact, usr_email, usr_iusrid, usr_idate, usr_staffID)
					values(@name, @usrName,'2+jquSGZN/0=',case @usrrole when null then 0 else  1 end , @usrrole, @mobNo, @email , @usrID, GETDATE(), @id)
 

					set @ret= 2
				end
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_staffhistoryreport_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_staffhistoryreport_get]
@stid nvarchar(50) = null, 
@id int = null
as
begin
	if(@stid is not null)
	begin
		 

		select staff_kid, staff_name,staff_Mob_No , Dept_name, designation_name from l_staff, L_Dept, l_designation where staff_Deptid= Dept_kid and designation_kid= staff_Designationid and staff_staffID=@stid
		 
	end
	else if (@id is not null )
	begin
		select ROW_NUMBER() over (order by (select null) ) row, CONVERT(nvarchar(50), adate, 100) date,actiontype,book_title, book_subtitle , book_isbn13 , bookstockdet_edition, book_authors , book_publisher, book_category, bookstockdet_bookrefID, status from (
			 			select issueTostaff_issuedate adate,  'Issue' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , issueTostaff_status status
		from L_issueTostaff, L_book, l_bookstockdet
		where  
			  issueTostaff_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTostaff_staffID=   @id   

			union all

			
			select returnTostaff_returndate adate,  'Return' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , 'R'status
		from L_issueTostaff, L_book, l_bookstockdet, [L_returnTostaff]
		where  returnTostaff_issuetostaffID= issueTostaff_kid and 
			  issueTostaff_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueTostaff_staffID=   @id   


			  

			 

			
		 )t order by adate desc
		 
	end 
end
GO
/****** Object:  StoredProcedure [dbo].[L_student_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
CREATE     proc [dbo].[L_student_get]
@id int=null  ,
@flag char(1)= null 
as
begin 
	if(@flag='L')
	begin
		select Course_kid,Course_name  from l_course where Course_status =1 order by Course_name
		select branch_kid, branch_name  from l_branch where branch_status =1  order by branch_name 
	end
	else  if(@id is not null)
	begin
			select student_kid, student_name, student_status,   student_parent, student_gender, student_Mob_No, student_Address, convert(nvarchar(10),student_DOJ)student_DOJ, student_Course, student_Branch, student_Photo, student_EmailID, student_stID, (select top 1  File_Path from L_File where File_Type=1 and File_id=student_kid order by File_Kid desc) file_id from l_student where student_kid= @id 
	end
	else
	begin
			
		select ROW_NUMBER() over (order by student_name ) row,   student_kid, student_name, student_status,   student_parent,case  student_gender when 'M' then 'Male'   when 'F' then 'Female' else 'Other' end student_gender, student_Mob_No, student_Address, convert(nvarchar(10),student_DOJ, 103)student_DOJ, Course_name, Branch_name, student_Photo, student_EmailID, student_stID from l_student, l_course, l_branch where branch_kid = student_Branch and  student_Course=Course_kid order by student_name 
 
	end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Student_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE    proc [dbo].[L_Student_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@address nvarchar(200)= null,  
@email nvarchar(50) =  null,  
@mobNo nvarchar(20)=null, 
@fname nvarchar(100)=null, 
@doj nvarchar(10)=null, 
@name nvarchar(100)=null, 
@sid nvarchar(50)=null, 
@branch int=null, 
@course int=null, 
@gender char(1)=null

as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  l_student  where student_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update l_student set student_status = @status, student_udate= GETDATE(),student_uusrid = @usrID where student_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from l_student where   student_stID = @sid    and student_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_student  set   student_name=@name,     student_parent=@fname, student_gender=@gender, student_Mob_No=@mobNo, student_Address=@address, student_DOJ=@doj, student_Course=@course, student_Branch=@branch,  student_EmailID=@email, student_stID=@sid , student_udate=GETDATE(),  student_uusrid=@usrID  where student_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_student  (  student_name, student_status,   student_parent, student_gender, student_Mob_No, student_Address, student_DOJ, student_Course, student_Branch,  student_EmailID, student_stID, student_iusrid, student_idate )
					values (@name, 1, @fname, @gender, @mobNo, @address, @doj, @course, @branch, @email, @sid, @usrID, GETDATE())
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_studenthistoryreport_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create   proc [dbo].[L_studenthistoryreport_get]
@stid nvarchar(50) = null, 
@id int = null
as
begin
	if(@stid is not null)
	begin
		 

		select student_kid, student_name,student_Mob_No , course_name, branch_name from l_student, l_course, l_branch where student_Branch= branch_kid and course_kid= student_Course and student_stID=@stid
		 
	end
	else if (@id is not null )
	begin
		select ROW_NUMBER() over (order by (select null) ) row, CONVERT(nvarchar(50), adate, 100) date,actiontype,book_title, book_subtitle , book_isbn13 , bookstockdet_edition, book_authors , book_publisher, book_category, bookstockdet_bookrefID, status from (
			 			select issueTostudent_issuedate adate,  'Issue' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , issueTostudent_status status
		from L_issueToStudent, L_book, l_bookstockdet
		where  
			  issueToStudent_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToStudent_StudentID=   @id   

			union all

			
			select returnToStudent_returndate adate,  'Return' actiontype , book_title, book_subtitle, book_isbn13,    bookstockdet_edition,
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), author_name), CHAR(13))    FROM l_author, l_lnkbookAuthor where lnkbookAuthor_AuthorID= author_kid  and   lnkbookAuthor_bookID=book_kid ) book_authors, 
			(select publisher_name from l_publisher where publisher_kid=book_publisher) book_publisher, 	
			( SELECT STRING_AGG (CONVERT(NVARCHAR(max), category_title), CHAR(13))    FROM l_category, l_lnkbookCategory where lnkbookCategory_categoryID= category_kid  and   lnkbookCategory_bookID=book_kid ) book_category,   bookstockdet_bookrefID , 'R'status
		from L_issueToStudent, L_book, l_bookstockdet, [L_returnToStudent]
		where  returnToStudent_issuetoStudentID= issueTostudent_kid and 
			  issueToStudent_bookstockdetID=bookstockdet_kid
			and book_kid= bookstockdet_bookid 
			and issueToStudent_StudentID=   @id   


			  

			 

			
		 )t order by adate desc
		 
	end 
end
GO
/****** Object:  StoredProcedure [dbo].[L_Supplier_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_Supplier_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  supp_kid, supp_code, supp_ename, supp_city, supp_state, supp_phone, supp_add1, supp_contname, supp_contphone, supp_status, supp_Email, supp_GSTIN, supp_idate, supp_udate, supp_iusrid, supp_uusrid, supp_pincode    from  l_supp  where supp_kid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by supp_ename ) row,     supp_kid, supp_code, supp_ename, supp_city, supp_state, supp_phone, supp_add1, supp_contname, supp_contphone, supp_status, supp_Email, supp_GSTIN, supp_idate, supp_udate, supp_iusrid, supp_uusrid, supp_pincode    from  l_supp  order by supp_ename 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_Supplier_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
CREATE  proc [dbo].[L_Supplier_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@address nvarchar(200)= null, 
@city nvarchar(50) = null,
@email nvarchar(50) =  null, 
@gstIN nvarchar(20) = null,
@landline nvarchar(20) = null,
@mobNo nvarchar(20)=null,
@pincode nvarchar(6)= null, 
@state nvarchar(50)= null,
@supp nvarchar(100) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  L_Supp  where Supp_kid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update L_Supp set supp_status = @status, supp_udate= GETDATE(),supp_uusrid = @usrID where supp_kid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from L_Supp where ( supp_ename = @supp  or supp_contphone = @mobNo  ) and supp_kid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update l_Supp  set  supp_ename=@supp, supp_city= @city, supp_state= @state, supp_phone=@landline, supp_add1=@address,  supp_contphone=@mobNo, supp_status=@status, supp_Email=@email, supp_GSTIN=@gstIN, supp_udate=GETDATE(),  supp_uusrid=@usrID, supp_pincode=@pincode where Supp_kid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  l_Supp  ( supp_ename, supp_city, supp_state, supp_phone, supp_add1,  supp_contphone, supp_status, supp_Email, supp_GSTIN, supp_idate,  supp_iusrid, supp_pincode)
					values (@supp, @city, @state, @landline, @address, @mobNo, @status, @email, @gstIN,GETDATE(), @usrID, @pincode)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_UpdatePaswd_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE       proc [dbo].[L_UpdatePaswd_save]
@user nvarchar(100)= null,
@password nvarchar(100)= null
as
begin
	begin try 
	begin tran 
		declare  @ret int =null 
 
			update l_usr set usr_pswd= @password where usr_code=@user
 
			 
 
		set @ret= 1
				
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_UserRole_get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE   proc [dbo].[L_UserRole_get]
@id int=null  
as
begin 
	 
if(@id is not null)
begin
	select  UserRoleKid,   UserRoleName,   UserRoleStatus     from  UserRole  where UserRoleKid= @id 
end
else
begin
			
	select ROW_NUMBER() over (order by UserRoleName ) row,     UserRoleKid,  UserRoleName,   UserRoleStatus    from  UserRole  order by UserRoleName 
 
end
	 
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_UserRole_save]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE  proc [dbo].[L_UserRole_save]
@id           INT=null, 
@flag char(1)= null, 
@status bit = 1,
@usrID int = null, 
@UserRole nvarchar(50) = null 
as
begin
 
 
	begin try 
	begin tran 
	declare  @ret int =null
		if(@flag = 'D')
		begin
			declare @count int =0
			if(@count = 0)
			begin
				delete from  UserRole  where UserRoleKid = @id
				set @ret= 1
			end
			else
				set @ret= 2
		end
		else if(@flag='U')
		begin
			update UserRole set UserRoleStatus = @status, UserRoleUdate= GETDATE(),UserRoleUuserId = @usrID where UserRoleKid =@id
			set @ret=1
		end
		else
 
		---- DUPLICATE----
		begin 
			declare @duplicate int=0  
			select @duplicate=COUNT(*) from UserRole where   UserRoleName = @UserRole    and UserRoleKid != isnull(@id,0)
			if(@duplicate = 0)
			begin
				if(@id is not null)
				begin
					 	update UserRole  set  UserRoleName=@UserRole,   UserRoleUdate=GETDATE(),  UserRoleUuserId=@usrID   where UserRoleKid =@id 
 
					set @ret= 1
					
				end
				else
				begin
					insert into  UserRole  ( UserRoleName, UserRoleStatus ,UserRoleIdate,  UserRoleIuserId)
					values (@UserRole,  @status,  GETDATE(), @usrID)
					  set @id = SCOPE_IDENTITY();
 
					set @ret= 2
				end
					 
			end
			else
				set @ret= 3
		end
		if(@@ERROR = 0)
		begin
			commit tran
			select @ret as val , @id as id
		end
	end try 
	begin catch
	
		ROLLBACK TRAN        
		SELECT         
		ERROR_NUMBER() AS ErrorNumber,        
		ERROR_SEVERITY() AS ErrorSeverity,        
		ERROR_STATE() as ErrorState,        
		ERROR_PROCEDURE() as ErrorProcedure,        
		ERROR_LINE() as ErrorLine,        
		replace(ERROR_MESSAGE(),'''','') as ErrorMessage;
 
  
        
        /*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		 SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	end catch
end
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_WebService_format_SpName]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
CREATE PROCEDURE [dbo].[L_WebService_format_SpName]
	@PageID int = 0	
AS
BEGIN
	SET NOCOUNT ON;
	if @PageID != 0
	begin
		select Format_SPName from L_format where Format_kid = @PageID
	end
END
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[L_WebService_GETFormat]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
CREATE proc [dbo].[L_WebService_GETFormat]      -- @date = '10/09/2020'    
@PageID int = 1,                        
@Type char(10) = 'R',                  
@LinkID int = 0,                  
@date nvarchar(10)=null
as 
begin                   
 
	declare @formatCounter int                
	declare @formatid int                
	declare @cnt int=0
 
	declare @i int=1
	declare @j int=0
	declare @t int=0
 
	if @date is null begin
		set @date=convert(nvarchar(10),getdate(),105)	 
	end
  
	select @formatCounter = count(FormatTemplate_kid) from  L_Format,L_FormatTemplate,L_link_ft_Linktable
	where Format_kid = @PageID                
    and FormatTemplate_status=1 and link_ft_Linktable_pagelinkid = @LinkID   and  link_ft_Linktable_FormatTemplateid= FormatTemplate_kid 
	and  Format_kid=FormatTemplate_Formatid      
	and (convert(date,isnull(FormatTemplate_fdate,getdate()),105) <= convert(date,@date,105))
	and (convert(date,isnull(FormatTemplate_tdate,getdate()),105) >= convert(date,@date,105))  --Gopal jangir 31/7/2019
 
		   
 
	declare @tbl table(id int identity(1,1) ,Header nvarchar(max),footer nvarchar(max),OPH nvarchar(max),LPF nvarchar(max),
    FormatDetail_HeaderBodyMargin int,FormatDetail_BodyFooterMargin int,FormatTemplate_kid int )  
  
  
	if(@formatCounter = 0)  begin                
	        
		select  [FormatTemplate_Format] as FormatDetail_Format,[FormatTemplate_PageType] as FormatDetail_PageType,[FormatTemplate_PageOrientation] as FormatDetail_PageOrientation,
		[FormatTemplate_PageLeftMargin] as FormatDetail_PageLeftMargin,[FormatTemplate_PageRightMargin] as FormatDetail_PageRightMargin ,FormatTemplate_kid
		,FormatTemplate_FooterPageNoColor --Manju Lalwani On 03/10/2018
		from L_FormatTemplate where FormatTemplate_ftype='B'  and FormatTemplate_status=1  and [FormatTemplate_Formatid]
		in ( select Format_kid from L_Format where Format_kid = @PageID )                            
		and FormatTemplate_kid not in (select link_ft_Linktable_FormatTemplateid from L_link_ft_Linktable )	 
		and (convert(date,isnull(FormatTemplate_fdate,getdate()),105) <= convert(date,@date,105))
		and (convert(date,isnull(FormatTemplate_tdate,getdate()),105) >= convert(date,@date,105))  --Gopal jangir 31/7/2019
		
        
		select label_Height,label_Width,Label_TopMargin,Label_LeftMargin,Label_StationaryType,Label_PageMargin from                           
		dbo.addon_LabelInfo where Label_FormatID =                           
		(select top 1 FEPR_FormatID from dbo.addon_FormatEditorPageRelation where FEPR_PageID = @PageID and FEPR_Type = @Type 
		and FEPR_LinkID = @LinkID and FEPR_FormatType= 'B')                          
     
	   insert into @tbl (FormatTemplate_kid,FormatDetail_HeaderBodyMargin,FormatDetail_BodyFooterMargin)
		select  FormatTemplate_kid,0,0
		from L_FormatTemplate where FormatTemplate_ftype='B' and FormatTemplate_status=1 and [FormatTemplate_Formatid]
		in ( select Format_kid from L_Format where Format_kid = @PageID )      
	    and FormatTemplate_kid not in(select link_ft_Linktable_FormatTemplateid from L_link_ft_Linktable )	 
		and (convert(date,isnull(FormatTemplate_fdate,getdate()),105) <= convert(date,@date,105))
		and (convert(date,isnull(FormatTemplate_tdate,getdate()),105) >= convert(date,@date,105))  --Gopal jangir 31/7/2019
		
                      
	end     
	else begin
 
		select  [FormatTemplate_Format] as FormatDetail_Format,[FormatTemplate_PageType] as FormatDetail_PageType,
		[FormatTemplate_PageOrientation] as FormatDetail_PageOrientation,[FormatTemplate_PageLeftMargin] as FormatDetail_PageLeftMargin
		,[FormatTemplate_PageRightMargin] as  FormatDetail_PageRightMargin , FormatTemplate_kid
		,FormatTemplate_FooterPageNoColor --Manju Lalwani On 03/10/2018
		from  L_Format,L_FormatTemplate,L_link_ft_Linktable
		where Format_kid = @PageID             
		and link_ft_Linktable_pagelinkid = @LinkID   and  link_ft_Linktable_FormatTemplateid= FormatTemplate_kid 
		and  Format_kid=FormatTemplate_Formatid   and FormatTemplate_status=1 
		and (convert(date,isnull(FormatTemplate_fdate,getdate()),105) <= convert(date,@date,105))
		and (convert(date,isnull(FormatTemplate_tdate,getdate()),105) >= convert(date,@date,105))  --Gopal jangir 31/7/2019
		
	 
		select label_Height,label_Width,Label_TopMargin,Label_LeftMargin,Label_StationaryType,Label_PageMargin from                           
		dbo.addon_LabelInfo where Label_FormatID =                           
		(select top 1 FEPR_FormatID from dbo.addon_FormatEditorPageRelation where FEPR_PageID = @PageID and FEPR_Type = @Type and FEPR_LinkID = @LinkID and FEPR_FormatType= 'B')                          
   
   
   
		insert into @tbl (FormatTemplate_kid,FormatDetail_HeaderBodyMargin,FormatDetail_BodyFooterMargin)
		select  FormatTemplate_kid,0,0
		from  L_Format,L_FormatTemplate,L_link_ft_Linktable
		where Format_kid = @PageID         
		and link_ft_Linktable_pagelinkid = @LinkID   and  link_ft_Linktable_FormatTemplateid= FormatTemplate_kid 
		and  Format_kid=FormatTemplate_Formatid      and FormatTemplate_status=1 
		and (convert(date,isnull(FormatTemplate_fdate,getdate()),105) <= convert(date,@date,105))
		and (convert(date,isnull(FormatTemplate_tdate,getdate()),105) >= convert(date,@date,105))  --Gopal jangir 31/7/2019
		
	
   
	end                                   
 
	select  @t=count(FormatTemplate_kid) from  @tbl
   
	while @i<=@t   
	begin
   
		select  @formatid=FormatTemplate_kid from @tbl where id=@i
       
		set @cnt=0
       
		select  @cnt=count(Link_formatTemplateid) from L_Link_HF_FT where Link_formatTemplateid=@formatid
       
		if @cnt>0 
		begin
			update @tbl set Header= (select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Headerid)
			,Footer=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Footerid)
			,OPH=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_otherHeaderid)
			,LPF=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_LastPagefooterid)
			,FormatDetail_HeaderBodyMargin=(select FormatTemplate_headerbodymargin from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Headerid),
			FormatDetail_BodyFooterMargin=(select FormatTemplate_BodyFooterMargin from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Footerid)
			from L_Link_HF_FT tbl1 where tbl1.Link_FormatTemplateid =@formatid and tbl1.Link_FormatTemplateid=FormatTemplate_kid  and id=@i
				        
		end
		else begin
			update @tbl set Header= (select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Headerid)
			,Footer=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Footerid)
			,OPH=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_otherHeaderid)
			,LPF=(select FormatTemplate_Format from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_LastPagefooterid)
			,FormatDetail_HeaderBodyMargin=(select FormatTemplate_headerbodymargin from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Headerid),
			FormatDetail_BodyFooterMargin=(select FormatTemplate_BodyFooterMargin from dbo.L_FormatTemplate tbl2 where tbl2.FormatTemplate_kid = tbl1.Link_Footerid)
			from L_Link_HF_FT tbl1 where tbl1.Link_FormatTemplateid=(select FormatTemplate_parentid from  L_FormatTemplate as tmp where  tmp.FormatTemplate_kid=@formatid)  and id=@i
		end
            
		set @i=@i+1
              
	end
   
	select Header,Footer,OPH,LPF,FormatDetail_HeaderBodyMargin,FormatDetail_BodyFooterMargin,id from  @tbl
 
	select Format_ename   from  L_Format
	where Format_kid = @PageID 
 
	select PaperType_Kid,PaperType_Name,PaperType_Height,PaperType_Width from L_papertype --where PaperType_Name=@PaperType
end
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[M_format_GetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
CREATE  proc [dbo].[M_format_GetSave]   --1,null ,1,Null,'ABC','S'           
@flag char(1)='E' , --  'E' for editing , 'S' for saving 
@formatid int =null,
@Format nvarchar(max)=null,     
@FormatDetail_PageType varchar(15) = 'A4',
@FormatDetail_PageOrientation char(1) = 'P',
@FormatDetail_PageLeftMargin int=15,
@FormatDetail_PageRightMargin int=15,
@FormatDetail_HeaderBodyMargin int=0,
@FormatDetail_BodyFooterMargin int=0,
@FormatDetail_FooterPageNoShow char(1)='Y', 
@FormatDetail_FooterPageNoColor nvarchar(50)='DimGray',
@headerid int=null,
@footerid int=null,
@othheaderid int=null,
@lastfooterid int=null
 
as    
 begin
 
  if @flag='E' begin
      
      declare @mnumid int=null
      
      select FormatTemplate_kid,FormatTemplate_ename,FormatTemplate_Parentid,FormatTemplate_Ftype, FormatTemplate_Formatid,
       FormatTemplate_Status,Format_mnumid ,[FormatTemplate_Format],[FormatTemplate_PageType]
      ,[FormatTemplate_PageOrientation]      ,[FormatTemplate_PageLeftMargin]   ,[FormatTemplate_PageRightMargin]  ,[FormatTemplate_HeaderBodyMargin]
      ,[FormatTemplate_BodyFooterMargin],Format_spname,FormatTemplate_FooterPageNoShow,FormatTemplate_FooterPageNoColor
      from L_FormatTemplate,L_Format where FormatTemplate_kid=@formatid 
       and FormatTemplate_Formatid = Format_kid           
     
     select @mnumid=Format_mnumid from L_Format,L_FormatTemplate
           where FormatTemplate_kid=@formatid and Format_kid=FormatTemplate_Formatid
     
     -- Header List
     select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='H'  and FormatTemplate_status=1 
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
     
     -- Footer List
     select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='F'  and FormatTemplate_status=1
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
     
     
     -- First Page Header List
      select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='OH'  and FormatTemplate_status=1
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
     
      --Last Page Footer List
    
       select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate
          where FormatTemplate_Ftype='LF'  and FormatTemplate_status=1 
               and FormatTemplate_Formatid in (select Format_kid from L_Format 
               where Format_mnumid=@mnumid)
          
     select  [Link_Headerid]
             ,[Link_Footerid]
              ,[Link_otherHeaderid]
              ,[Link_LastPagefooterid]
        from L_Link_HF_FT                                     
            where   [Link_FormatTemplateid]=@formatid    
      
	select PaperType_Kid,PaperType_Name from L_papertype
  end
  
  if @flag='S' begin
     
  begin try 
     begin tran
     
       update L_FormatTemplate set 
               [FormatTemplate_Format]=@Format
               ,[FormatTemplate_PageType]=@FormatDetail_PageType
			  ,[FormatTemplate_PageOrientation]=@FormatDetail_PageOrientation
			  ,[FormatTemplate_PageLeftMargin]=@FormatDetail_PageLeftMargin
			  ,[FormatTemplate_PageRightMargin]=@FormatDetail_PageRightMargin
			  ,[FormatTemplate_HeaderBodyMargin]=@FormatDetail_HeaderBodyMargin
			  ,[FormatTemplate_BodyFooterMargin]=@FormatDetail_BodyFooterMargin
			  ,[FormatTemplate_FooterPageNoShow]=@FormatDetail_FooterPageNoShow 
			  ,[FormatTemplate_FooterPageNoColor]=@FormatDetail_FooterPageNoColor		      	      
       where
             FormatTemplate_kid=@formatid
             
        delete from L_Link_HF_FT where Link_FormatTemplateid=@formatid
        
           if @headerid is not null or @footerid is not null begin
	
               insert into L_Link_HF_FT ([Link_FormatTemplateid],[Link_Headerid],[Link_Footerid],[Link_otherHeaderid],[Link_LastPagefooterid])
               values (@formatid,@headerid,@footerid,@othheaderid,@lastfooterid)             
           end
 
          if @@ERROR=0    begin
    		commit tran
			select 1
	    	end
	 end try
	 begin catch
		rollback tran		   			  
		  select ERROR_NUMBER() AS ErrorNumber,  
		ERROR_SEVERITY() AS ErrorSeverity,  
		ERROR_STATE() as ErrorState,  
		ERROR_PROCEDURE() as ErrorProcedure,  
		ERROR_LINE() as ErrorLine,  
		ERROR_MESSAGE() as ErrorMessage; 
	    declare @ErrorNumber int=null
    declare @ErrorSeverity int=null
    declare @ErrorState int=null
    declare @ErrorProcedure nvarchar(max)=null
    declare @ErrorLine int=null
    declare @ErrorMessage nvarchar(max)=null
     SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
    exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null
 
	 end catch
	 
  end
 
 end
 
 	
		
		
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[M_FormatTemplate_GetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[M_FormatTemplate_GetSave] --1,4 ,9,Null, null,'A',null,'A','F',5         
@mnumid int=null,
@activityID int=0,
@parentid int =null,
@FormatName nvarchar(max)=null,
@flag char(1)='L' ,
@Formatid int =null,
@status bit= null,
@Ftype char(2)='B',
@usrid int=null
as    
begin 
  if @flag='L' begin     
        select mnum_name,mnum_kid from L_mnum where  mnum_parentid is null   group by mnum_name,mnum_kid    order by mnum_name,mnum_kid   
      
  end
 
  if @flag='M' begin
     select Format_kid,Format_ename  from L_Format where  Format_mnumid=@mnumid order by Format_ename
  end   
 if @flag='D' begin     
 
     delete from L_Link_HF_FT where Link_FormatTemplateid=@Formatid
    -- delete from L_Link_FT_LinkTable where Link_FT_LinkTable_Formattemplateid=@Formatid     
     delete from L_FormatTemplate where FormatTemplate_kid=@Formatid
     select 1
 end
  if @flag='A' begin
      
      select FormatTemplate_kid,FormatTemplate_ename from L_FormatTemplate where FormatTemplate_Formatid in(select Format_kid from L_Format where Format_mnumid=@mnumid) and FormatTemplate_status=1 and FormatTemplate_Ftype=@Ftype order by FormatTemplate_ename
      
      select FormatTemplate_kid,FormatTemplate_ename,case when FormatTemplate_Parentid IS NULL then '0' else FormatTemplate_Parentid end FormatTemplate_Parentid,FormatTemplate_Ftype, FormatTemplate_Formatid, FormatTemplate_Status,Format_mnumid,Format_linkTable,convert(nvarchar(10),Formattemplate_tdate,103) as Formattemplate_tdate 
      from L_FormatTemplate,L_Format where FormatTemplate_Formatid=@activityID and FormatTemplate_status=1 and FormatTemplate_Ftype=@Ftype
      and FormatTemplate_Formatid = Format_kid order by FormatTemplate_ename
           
  end   
  if @flag='E' begin
      select FormatTemplate_kid,FormatTemplate_ename,FormatTemplate_Parentid,FormatTemplate_Ftype, FormatTemplate_Formatid, FormatTemplate_Status,Format_mnumid 
      from L_FormatTemplate,L_Format where FormatTemplate_kid=@Formatid 
      and FormatTemplate_Formatid = Format_kid     order by FormatTemplate_ename
      
  end
  if @flag='G' begin
     select Format_kid,Format_ename,Format_spname, Format_linkTable  from L_Format where  Format_mnumid=@mnumid  and Format_kid=@activityID     order by Format_ename
  end 
  if @flag='S' begin
     
  begin try 
     begin tran
     
     if @Formatid is null begin
  
        insert into L_FormatTemplate (FormatTemplate_Formatid,FormatTemplate_parentid,FormatTemplate_ename,FormatTemplate_status,FormatTemplate_ftype,FormatTemplate_idate,FormatTemplate_iusrid)
        values (@activityID,@parentid,@FormatName,@status,@ftype, GETDATE(),@usrid)
     end
     else begin
       update L_FormatTemplate set 
             FormatTemplate_Formatid=@activityID,
             FormatTemplate_parentid=@parentid,
             FormatTemplate_ename=@FormatName,
             FormatTemplate_status=@status,
             FormatTemplate_ftype=@ftype,
			 FormatTemplate_Udate=GETDATE(),
             FormatTemplate_uusrid=@usrid
       where
             FormatTemplate_kid=@Formatid
             
     end          
          if @@ERROR=0    begin
    		commit tran
			select 1
	    	end
	 end try
	 begin catch
		rollback tran		   			  
		  select ERROR_NUMBER() AS ErrorNumber,  
		ERROR_SEVERITY() AS ErrorSeverity,  
		ERROR_STATE() as ErrorState,  
		ERROR_PROCEDURE() as ErrorProcedure,  
		ERROR_LINE() as ErrorLine,  
		ERROR_MESSAGE() as ErrorMessage; 
	  	    
	/*Erorr Handling*/		    
    declare @ErrorNumber int=null
    declare @ErrorSeverity int=null
    declare @ErrorState int=null
    declare @ErrorProcedure nvarchar(max)=null
    declare @ErrorLine int=null
    declare @ErrorMessage nvarchar(max)=null
     SELECT       
	@ErrorNumber=ERROR_NUMBER(),      
	@ErrorSeverity=ERROR_SEVERITY(),      
	@ErrorState=ERROR_STATE(),      
	@ErrorProcedure=ERROR_PROCEDURE(),      
	@ErrorLine=ERROR_LINE(),      
	@ErrorMessage=ERROR_MESSAGE();           
    exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=null 
	/*End*/
	 end catch
	 
  end
 
 end
 
 	
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[M_WebService_PrintPDFSetting_Get]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[M_WebService_PrintPDFSetting_Get]
@ActivityID int = null
as
BEGIN
	if @ActivityID <> 0 and @ActivityID is not null
	begin
		select FormatTemplate_FooterPageNoShow as Show,FormatTemplate_FooterPageNoColor as color from L_FormatTemplate
		--select 'Y' as Show,'Black' as color from h_FormateTemplate
		where FormatTemplate_kid = @ActivityID
	end
	else begin
		select 'Y' as Show, 'DimGray' as color
		--select 'Y' as Show, 'Black' as color
	end
END
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[PrintString]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
create PROCEDURE [dbo].[PrintString]
(
  @InputString     nvarchar(max)  = NULL
, @MaxPrintLength  int            = 4000
)
 
AS
BEGIN
    SET NOCOUNT ON
 
    --! CONSTANTS (keep it SQL2005 compatible)
    DECLARE @LF          char ( 1 ); SET @LF         = CHAR(10);
    DECLARE @CR          char ( 1 ); SET @CR         = CHAR(13);
    DECLARE @CRLF        char ( 2 ); SET @CRLF       = CHAR(13) + CHAR(10);
    DECLARE @LINE_BREAK  char ( 3 ); SET @LINE_BREAK = '%' + @LF + '%';
 
    --! Working Values
    DECLARE @WorkingLength    bigint
    DECLARE @WorkingString    nvarchar  (  max )
    DECLARE @SubString        nvarchar  (  max )
    DECLARE @SubStringLength  bigint
 
    --! Validate/correct inputs
    SET @MaxPrintLength = COALESCE(NULLIF(@MaxPrintLength, 0), 4000)
 
    IF @MaxPrintLength > 4000
        BEGIN
            RAISERROR('The @MaxPrintLength value of %d is greater than the maximum length supported by PRINT for nvarchar strings (4000)', 17, 1, @MaxPrintLength);
            RETURN(60000);
        END
 
    --! Working variables
    DECLARE @InputLength bigint = LEN(@InputString)
 
    IF @InputLength = 0
        GOTO OnComplete;
 
    --!
    --! Our input string may contain either carriage returns, line feeds or both
    --! to separate printing lines so we need to standardise on one of these (LF)
    --!
    SET @WorkingString = REPLACE(REPLACE(@InputString, @CRLF, @LF), @CR, @LF);
 
    --!
    --! If there are line feeds we use those to break down the text
    --! into individual printed lines, otherwise we print it in
    --! bite-size chunks suitable for consumption by PRINT
    --!
    IF PATINDEX(@LINE_BREAK, @InputString) > 0
 
        BEGIN --[BREAK_BY_LINE_FEED]
 
            --! Add a line feed on the end so the final iteration works as expected
            SET @WorkingString  = @WorkingString + @LF;
            SET @WorkingLength  = LEN(@WorkingString);
 
            DECLARE @LineFeedPos    bigint    = 0
 
            WHILE @WorkingLength > 0
                BEGIN
                    --!
                    --! Get the position of the next line feed
                    --!
                    SET @LineFeedPos = PATINDEX(@LINE_BREAK, @WorkingString);
 
                    IF @LineFeedPos > 0
                        BEGIN
                            SET @SubString        = SUBSTRING(@WorkingString, 1, @LineFeedPos - 1);
                            SET @SubStringLength  = LEN(@SubString);
 
                            --!
                            --! If this string is too long for a single PRINT, we pass it back
                            --! to PrintString which will process the string in suitably sized chunks
                            --!
                            IF LEN(@SubString) > @MaxPrintLength
                                EXEC [PrintString] @InputString = @SubString
                            ELSE
                                PRINT @SubString;
 
                            --! Remove the text we've just processed
                            SET @WorkingLength    = @WorkingLength - @LineFeedPos;
                            SET @WorkingString    = SUBSTRING(@WorkingString, @LineFeedPos + 1, @WorkingLength);
                        END
                END
 
        END --[BREAK_BY_LINE_FEED]
    ELSE
        BEGIN --[BREAK_BY_LENGTH]
            --!
            --! If there are no line feeds we may have to break it down
            --! into smaller bit size chunks suitable for PRINT
            --!
            IF @InputLength > @MaxPrintLength
                BEGIN
                    SET @WorkingString    = @InputString;
                    SET @WorkingLength    = LEN(@WorkingString);
                    SET @SubStringLength  = @MaxPrintLength;
 
                    WHILE @WorkingLength > 0
                        BEGIN
                            SET @SubString        = SUBSTRING(@WorkingString, 1, @SubStringLength);
                            SET @SubStringLength  = LEN(@SubString)
 
                            --!
                            --! If we still have text to process, set working values
                            --!
                            IF (@WorkingLength - @SubStringLength + 1) > 0
                                BEGIN
                                    PRINT @SubString;
                                    --! Remove the text we've just processed
                                    SET @WorkingString    = SUBSTRING(@WorkingString, @SubStringLength + 1, @WorkingLength);
                                    SET @WorkingLength    = LEN(@WorkingString);
                                END
                        END
                END
            ELSE
                PRINT @InputString;
 
        END --[BREAK_BY_LENGTH]
 
--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////
 
    SET NOCOUNT OFF
 
    RETURN
 
END
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[SMS_SMSConfig_GetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[SMS_SMSConfig_GetSave]
@SMSConfig_Kid int = null,
@SMSConfig_ConfigName nvarchar(MAX)= null,
@SMSConfig_CommonPart nvarchar(MAX)= null,
@SMSConfig_ForMobile nvarchar(MAX)= null,
@SMSConfig_ForMessage nvarchar(MAX)= null,
@SMSConfig_Default bit= null,
@SMSConfig_Date datetime= null,
@SMSConfig_Userid int= null,
@flag char(1)= 'L'
as
begin
 DECLARE @Pkey INT;
	if @flag = 'L'
	begin
		select row_number() over(order by SMSConfig_Kid) as row, SMSConfig_Kid,SMSConfig_ConfigName,SMSConfig_CommonPart,SMSConfig_ForMobile,SMSConfig_ForMessage,SMSConfig_Default,SMSConfig_Date from SMS_SMSConfig 
	end
	else if @flag = 'G'
	begin
		select SMSConfig_Kid,SMSConfig_ConfigName,SMSConfig_CommonPart,SMSConfig_ForMobile,SMSConfig_ForMessage,SMSConfig_Default,SMSConfig_Date from SMS_SMSConfig where SMSConfig_Kid=@SMSConfig_Kid		
	end
	else
	begin
		update SMS_SMSConfig set SMSConfig_Default=0
		if @SMSConfig_Kid is null
		begin
			
			insert into SMS_SMSConfig (SMSConfig_ConfigName,SMSConfig_CommonPart,SMSConfig_ForMobile,SMSConfig_ForMessage,SMSConfig_Default,SMSConfig_Date)
			values (@SMSConfig_ConfigName,@SMSConfig_CommonPart,@SMSConfig_ForMobile,@SMSConfig_ForMessage,@SMSConfig_Default,@SMSConfig_Date)
			set @SMSConfig_Kid =SCOPE_IDENTITY()			
		end
		else
		begin			
			update SMS_SMSConfig set SMSConfig_ConfigName=@SMSConfig_ConfigName,SMSConfig_CommonPart=@SMSConfig_CommonPart,SMSConfig_ForMobile=@SMSConfig_ForMobile,SMSConfig_ForMessage=@SMSConfig_ForMessage,SMSConfig_Default=0,SMSConfig_Date=@SMSConfig_Date
			where SMSConfig_Kid=@SMSConfig_Kid		
		end
		
		if (select COUNT(SMSConfig_Kid) from SMS_SMSConfig) = 1
			update SMS_SMSConfig set SMSConfig_Default=1
		else if (select COUNT(SMSConfig_Kid) from SMS_SMSConfig where SMSConfig_Default = 1) = 0
			update SMS_SMSConfig set SMSConfig_Default=1 where SMSConfig_Kid=@SMSConfig_Kid		
	end			
end
	
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[SMS_TemplateCreationGetSave]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
CREATE  proc [dbo].[SMS_TemplateCreationGetSave]
@flag char(1)='L',
@SMSActivityID int=null,
@SMSSchedule_Type char(1)=null,
@SMSSchedule_DaysBefore int = 0,
@SMSSchedule_StartTime nvarchar(10)=null,
@SMSSchedule_TimeBefore int = 0,
@SMSSchedule_TimeSpan int = 0,
@SMSSchedule_Msg nvarchar(max)=null
as
begin
SET NOCOUNT ON                   
BEGIN TRY         
BEGIN TRAN   
DECLARE @Pkey INT;
	if @flag = 'L'
	begin
		select SMSActivity_Kid,SMSActivity_Name from SMS_SMSActivity order by SMSActivity_Name
	end
	else if @flag = 'C'
	begin
		SELECT SMSActivity_AddonProcedure,SMSSchedule_SMSActivityID, SMSSchedule_Type, SMSSchedule_DaysBefore, SMSSchedule_StartTime, SMSSchedule_TimeBefore, SMSSchedule_TimeSpan, SMSSchedule_Msg FROM SMS_SMSACTIVITY LEFT JOIN SMS_SMSSchedule ON SMSActivity_Kid = SMSSchedule_SMSActivityID WHERE SMSActivity_Kid = @SMSActivityID
	end
	else if @flag = 'S'
	begin
		declare  @count int = 0
		select @count = (select count(SMSActivity_Kid) from SMS_SMSSchedule,SMS_SMSActivity where SMSActivity_Kid = SMSSchedule_SMSActivityID and  SMSSchedule_SMSActivityID = @SMSActivityID)
		if @count = 0
		begin
			insert into SMS_SMSSchedule(SMSSchedule_SMSActivityID, SMSSchedule_Type, SMSSchedule_DaysBefore, SMSSchedule_StartTime, SMSSchedule_TimeBefore, SMSSchedule_TimeSpan, SMSSchedule_Msg)
			values (@SMSActivityID,@SMSSchedule_Type,@SMSSchedule_DaysBefore,@SMSSchedule_StartTime,@SMSSchedule_TimeBefore,@SMSSchedule_TimeSpan,@SMSSchedule_Msg)
		end
		else
		begin
			update SMS_SMSSchedule set SMSSchedule_Type=@SMSSchedule_Type, SMSSchedule_DaysBefore=@SMSSchedule_DaysBefore, SMSSchedule_StartTime=@SMSSchedule_StartTime, SMSSchedule_TimeBefore=@SMSSchedule_TimeBefore, SMSSchedule_TimeSpan=@SMSSchedule_TimeSpan, SMSSchedule_Msg=@SMSSchedule_Msg
			where SMSSchedule_SMSActivityID = @SMSActivityID
		end			
	end
IF @@ERROR = 0 begin    
	  select 1  
	  COMMIT TRAN       
	END  
	END TRY        
	BEGIN CATCH        
        ROLLBACK TRAN        
        SELECT '0',
        ERROR_NUMBER() AS ErrorNumber,        
        ERROR_SEVERITY() AS ErrorSeverity,        
        ERROR_STATE() as ErrorState,        
        ERROR_PROCEDURE() as ErrorProcedure,        
        ERROR_LINE() as ErrorLine,        
        replace(ERROR_MESSAGE(),'''','') as ErrorMessage            
 
		/*Erorr Handling*/		    
		declare @ErrorNumber int=null
		declare @ErrorSeverity int=null
		declare @ErrorState int=null
		declare @ErrorProcedure nvarchar(max)=null
		declare @ErrorLine int=null
		declare @ErrorMessage nvarchar(max)=null
		SELECT       
		@ErrorNumber=ERROR_NUMBER(),      
		@ErrorSeverity=ERROR_SEVERITY(),      
		@ErrorState=ERROR_STATE(),      
		@ErrorProcedure=ERROR_PROCEDURE(),      
		@ErrorLine=ERROR_LINE(),      
		@ErrorMessage=ERROR_MESSAGE();           
		exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null,@ManulDiscription=@ErrorMessage
		/*End*/
END CATCH
end
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[sp_defination]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
CREATE proc [dbo].[sp_defination]
@name nvarchar(max)
as
 
 set nocount on
declare @no nvarchar(2)=char(10)+char(13)
declare @no1 nvarchar(2)=char(13)
declare @no2 nvarchar(2)=char(10)
declare @demo1 nvarchar(max)=null
set @demo1=cast(REPLACE ( @name , @no1 , ',' ) as nvarchar(max))
 
declare @demotable table
(
 id int identity(1,1),
 item nvarchar(800) null
)
insert into @demotable(item)
select rtrim(ltrim(item))  from  dbo.fnSplit(@demo1,',')
 
declare @objects table
(
 objectid int null
)
 
declare @i int =1
 
while (@i<=(select COUNT(*) from @demotable)) begin
   
	declare @s nvarchar(500)=null
	declare @s1 nvarchar(500)=null
	declare @s3 nvarchar(500)=null
	select @s =replace(s.item,'[','') from @demotable s where s.id=@i
	set @s1=replace(@s,']','')
	set @s3=REPLACE(@s1,@no2,'')
		 insert into @objects
		 select object_id from sys.objects  where name =rtrim(ltrim(@s3)) Order By Modify_date 
	     set @i=@i+1
 
end
 
 
DECLARE JOB_CURSORSUB CURSOR FOR
		select objectid from @objects
			OPEN JOB_CURSORSUB
	DECLARE @OBJECT_ID1 AS INT
	FETCH NEXT FROM JOB_CURSORSUB
	INTO @OBJECT_ID1
 
	DECLARE @SQL1 AS VARCHAR(MAX)
 
			WHILE @@FETCH_STATUS = 0
			BEGIN
 
					SELECT @SQL1 = 'GO' + @no + ' IF OBJECT_ID (''['+ S.NAME + '].['+ O.NAME + ']'') IS NOT NULL 
					BEGIN
					DROP '+
					CASE O.TYPE 
					WHEN 'P' THEN 'PROCEDURE ' 
					WHEN 'V' THEN 'VIEW '
					WHEN 'FN' THEN ' FUNCTION '
					WHEN 'TF' THEN 'FUNCTION '
					WHEN 'TR' THEN 'TRIGGER '
					END + ' ['+ S.NAME + '].['+ O.NAME + ']
					END
					GO' + @no + @no +
					+ M.DEFINITION + @no + 'GO' + @no
					FROM SYS.OBJECTS O 
					INNER JOIN SYS.SQL_MODULES M ON O.OBJECT_ID = M.OBJECT_ID 
					INNER JOIN SYS.SCHEMAS S ON S.SCHEMA_ID = O.SCHEMA_ID
					WHERE O.OBJECT_ID = @OBJECT_ID1 
					
			         EXEC [PrintString] @SQL1;
		         	FETCH NEXT FROM JOB_CURSORSUB
			       INTO @OBJECT_ID1
			END
			       
			      CLOSE JOB_CURSORSUB
	          DEALLOCATE JOB_CURSORSUB
 
			       
			
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[USP_EmailConfigurationSetting]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
CREATE proc [dbo].[USP_EmailConfigurationSetting]  
@flag char(2)='L',  
@EmailConfigSetting_kid int=0,  
@EmailConfigSetting_SmtpAddress nvarchar(100)=null,  
@EmailConfigSetting_password nvarchar(50)=null,  
@EmailConfigSetting_default bit=0,
@EmailConfigSetting_SSL bit=0,    
@EmailConfigSetting_PortNo nvarchar(10)=null,  
@EmailConfigSetting_FromEmail nvarchar(100)=null,
@userid int =null 
 
as  
begin  
 if @flag = 'L'--page load  
 begin     
 select row_number() over(order by EmailConfigSetting_kid) as row, EmailConfigSetting_kid, EmailConfigSetting_SmtpAddress, EmailConfigSetting_PortNo, EmailConfigSetting_FromEmail, EmailConfigSetting_password, EmailConfigSetting_default, emailconfigsetting_SSL from h_EmailConfigSetting
 end  
 if @flag = 'E'--edit record  
 begin    
 select EmailConfigSetting_kid,EmailConfigSetting_SmtpAddress,EmailConfigSetting_PortNo,EmailConfigSetting_FromEmail,EmailConfigSetting_password,EmailConfigSetting_default,emailconfigsetting_SSL from h_EmailConfigSetting where EmailConfigSetting_kid=@EmailConfigSetting_kid
   
 end  
 if @flag = 'D'  
 begin  
   begin try    
  set nocount on    
  begin tran   
     declare @default bit = 0
     set @default=(select EmailConfigSetting_default from h_EmailConfigSetting where EmailConfigSetting_kid=@EmailConfigSetting_kid)
     if @default = 1
     begin
     update h_EmailConfigSetting set EmailConfigSetting_default=1 where EmailConfigSetting_kid=(select top 1 EmailConfigSetting_kid from h_EmailConfigSetting where EmailConfigSetting_kid <> @EmailConfigSetting_kid)
     
     end 
     
   
     delete from h_EmailConfigSetting where EmailConfigSetting_kid=@EmailConfigSetting_kid 
     if @@ERROR=0 begin    
      commit tran    
      select 1 -- deleted succeessfully    
     end       
     else begin    
      rollback tran    
     end        
    end try    
    begin catch    
     rollback tran    
     select 0 -- error    
    end catch    
 end  
 if @flag = 'S'  
 begin  
	 if @EmailConfigSetting_default = 1
	 begin
	  update h_EmailConfigSetting set EmailConfigSetting_default=0
	 end
 
 
  declare @duplicate int=0   
  select @duplicate=COUNT(*) from h_EmailConfigSetting where (EmailConfigSetting_SmtpAddress = @EmailConfigSetting_SmtpAddress and EmailConfigSetting_FromEmail = @EmailConfigSetting_FromEmail) and EmailConfigSetting_kid != @EmailConfigSetting_kid  
  if @duplicate = 0 and @EmailConfigSetting_kid = 0  
  begin  
		begin try
		begin tran
 
	   insert into h_EmailConfigSetting (EmailConfigSetting_SmtpAddress,EmailConfigSetting_PortNo,EmailConfigSetting_FromEmail,EmailConfigSetting_password,EmailConfigSetting_default,EmailConfigSetting_iuserid,EmailConfigSetting_idate,emailconfigsetting_SSL) 
	   values (@EmailConfigSetting_SmtpAddress,@EmailConfigSetting_PortNo,@EmailConfigSetting_FromEmail,@EmailConfigSetting_password,@EmailConfigSetting_default,@userid,GETDATE(),@EmailConfigSetting_SSL)  
	   if @@error = 0 begin
			commit tran
			select 1
		end	
		END TRY        
		BEGIN CATCH        
			ROLLBACK TRAN        
			declare @ErrorNumber int=null
			declare @ErrorSeverity int=null
			declare @ErrorState int=null
			declare @ErrorProcedure nvarchar(max)=null
			declare @ErrorLine int=null
			declare @ErrorMessage nvarchar(max)=null
			 SELECT       
			@ErrorNumber=ERROR_NUMBER(),      
			@ErrorSeverity=ERROR_SEVERITY(),      
			@ErrorState=ERROR_STATE(),      
			@ErrorProcedure=ERROR_PROCEDURE(),      
			@ErrorLine=ERROR_LINE(),      
			@ErrorMessage=ERROR_MESSAGE();           
			exec [usp_ErrorLogInsert] @ERROR_NUMBER=@ErrorNumber,@ERROR_SEVERITY=@ErrorSeverity,@ERROR_STATE=@ErrorState,@ERROR_PROCEDURE=@ErrorProcedure,@ERROR_LINE=@ErrorLine,@ERROR_MESSAGE=@ErrorMessage,@useid=null
		END CATCH   
  end  
  else if @duplicate = 0 and @EmailConfigSetting_kid != 0  
  begin  
   
   update h_EmailConfigSetting set EmailConfigSetting_SmtpAddress=@EmailConfigSetting_SmtpAddress,EmailConfigSetting_PortNo=@EmailConfigSetting_PortNo,EmailConfigSetting_FromEmail=@EmailConfigSetting_FromEmail,EmailConfigSetting_password=@EmailConfigSetting_password,EmailConfigSetting_default=@EmailConfigSetting_default 
   ,EmailConfigSetting_uuserid=@userid,EmailConfigSetting_udate=getdate(),emailconfigsetting_SSL=@EmailConfigSetting_SSL where EmailConfigSetting_kid=@EmailConfigSetting_kid 
   select 2  
  end  
  else  
   select 0  
     
 end  
end  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
/****** Object:  StoredProcedure [dbo].[usp_ErrorLogInsert]    Script Date: 16/Dec/23 12:38:36 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
 
 
 
 
 
 
 
 
 
 
 
CREATE Procedure [dbo].[usp_ErrorLogInsert]
 @ERROR_NUMBER int=null
,@ERROR_SEVERITY int=null
,@ERROR_STATE int=null
,@ERROR_PROCEDURE nvarchar(max)=null
,@ERROR_LINE  int=null
,@ERROR_MESSAGE nvarchar(max)=null
,@useid int=0
,@ManulDiscription nvarchar(max)=null
 as
 begin
 
Set Nocount on
 
		INSERT INTO ErrorLog
			([ERROR_NUMBER]
			,[ERROR_SEVERITY]
			,ErrorSstate
			,ProcedureName
			,[ERRORLINE]
			,[ERROR_MESSAGE]
			,error_manualdesc
			,error_userid)
		 VALUES
			(@ERROR_NUMBER
			,@ERROR_SEVERITY
			,@ERROR_STATE
			,@ERROR_PROCEDURE
			,@ERROR_LINE
			,@ERROR_MESSAGE
			,@ManulDiscription
			,@useid)
	 SELECT  -1  as val  , @ERROR_NUMBER
			,@ERROR_SEVERITY
			,@ERROR_STATE
			,@ERROR_PROCEDURE
			,@ERROR_LINE
			,@ERROR_MESSAGE
			,@ManulDiscription
 end
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the primary key of this table.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_kid'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is for start date of academin year.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_From'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is for end date of academin year.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_To'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is for status.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is for insert date.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is for user Id.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Ayear', @level2type=N'COLUMN',@level2name=N'Ayear_usrid'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A for Active, D for Deactive' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Dept', @level2type=N'COLUMN',@level2name=N'Dept_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'D= Doctor Profile, H= Hospital Image, HL= Hospital Logo' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_File', @level2type=N'COLUMN',@level2name=N'File_Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A for Active, D for Deactive' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Gender', @level2type=N'COLUMN',@level2name=N'Gender_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A for Active, D for Deactive' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_Title', @level2type=N'COLUMN',@level2name=N'Title_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A for Active, D for deactive' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'l_usr', @level2type=N'COLUMN',@level2name=N'usr_Status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'T->  Terms & Condition ,  P-> Privacy Policy,  A->End User Agreement' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'L_UsrAgreement', @level2type=N'COLUMN',@level2name=N'UsrAgreement_Type'
GO
USE [master]
GO
ALTER DATABASE [LibMan] SET  READ_WRITE 
GO
